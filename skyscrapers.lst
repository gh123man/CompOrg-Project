   1 0000               
   2 0000               
   3 0000               
   4 0000               PRINT_INT = 1
   5 0000               PRINT_STRING = 4
   6 0000               READ_INT = 5
   7 0000               EXIT = 10
   8 0000               
   9 0000               	.data
  10 0000               	.align	0
  11 0000               
  12 0000               board_size:
  13 0000 00      		.byte	0
  14 0001               board:
  15 0001 00000000		.space	256
          00000000
          00000000
          00000000
          00000000
          00000000
  16 0101               north_hints:
  17 0101 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  18 0121               south_hints:
  19 0121 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  20 0141               east_hints:
  21 0141 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  22 0161               west_hints:
  23 0161 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  24 0181               
  25 0181               board_row_break_part:
  26 0181 2B2D2D2D		.asciiz "+---"
          00      
  27 0186               plus_char_break:
  28 0186 2B0A00  		.asciiz "+\n"
  29 0189               board_space_front:
  30 0189 7C2000  		.asciiz "| "
  31 018c               board_space_mid:
  32 018c 207C2000		.asciiz " | "
  33 0190               board_space_back:
  34 0190 207C0A00		.asciiz " |\n"
  35 0194               new_line_char:
  36 0194 0A00    		.asciiz "\n"
  37 0196               spacess:
  38 0196 202000  		.asciiz "  "
  39 0199               spaces:
  40 0199 2000    		.asciiz " "
  41 019b               	
  42 019b               board_input_error:
  43 019b 0A496E76		.asciiz "\nInvalid board size, Skyscrapers terminating\n"
          616C6964
          20626F61
          72642073
          697A652C
          20536B79
  44 01c9               illegal_input_error:
  45 01c9 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  46 01f7               fixed_number_input_error:
  47 01f7 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
  48 0230               fixed_input_error:
  49 0230 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
  50 0265               	
  51 0000               	.text
  52 0000               	.align	2
  53 0000               
  54 0000               #####################################################
  55 0000               #                  Program area                     #
  56 0000               #####################################################
  57 0000               
  58 0000               
  59 0000               #
  60 0000               # Name: Main
  61 0000               #
  62 0000               main:
  63 0000 23BDFFF8		addi	$sp, $sp, -8
  64 0004 AFBF0004		sw	$ra, 4($sp)
  65 0008 AFB00000		sw	$s0, 0($sp)
  66 000c               	
  67 000c 0C0000DA		jal	read_input
  68 0010 1040000B		beq	$v0, $zero, main_done	#end if it returned false.
  69 0014               	
  70 0014 0C000163		jal	print_board
  71 0018               	
  72 0018               	
  73 0018 3C040000		la	$a0, board
     001c 34840000
  74 0020 34050000		li	$a1, 0
  75 0024 3C080000		la	$t0, board_size
     0028 35080000
  76 002c 81060000		lb	$a2, 0($t0)
  77 0030 00C60018		mul	$a3, $a2, $a2
     0034 00003812
  78 0038               	
  79 0038 0C000014		jal	eval
  80 003c               	
  81 003c               	#la	$t0, board_size
  82 003c               	#lb	$a2, 0($t0)
  83 003c               	
  84 003c               	#li	$a0, -1
  85 003c               	#li	$a1, 0
  86 003c               	#jal	get_next_south
  87 003c               	#move	$a0, $v0
  88 003c               	#jal	print_number
  89 003c               	
  90 003c               	#debug
  91 003c 0C000163		jal	print_board
  92 0040               
  93 0040               main_done:
  94 0040 8FBF0004		lw	$ra, 4($sp)
  95 0044 8FB00000		lw	$s0, 0($sp)
  96 0048 23BD0008		addi	$sp, $sp, 8
  97 004c 03E00008		jr	$ra
  98 0050               
  99 0050               
 100 0050               
 101 0050               
 102 0050               #####################################################
 103 0050               #                    Sim eval                       #
 104 0050               #####################################################
 105 0050               
 106 0050               #
 107 0050               # Name: eval
 108 0050               #
 109 0050               # Arguments:
 110 0050               #    a0: board location pointer
 111 0050               #    a1: board locaiton counter
 112 0050               #    a2: board bound
 113 0050               #    a3: board length
 114 0050               #
 115 0050               eval:
 116 0050 23BDFFE0		addi	$sp, $sp, -32
 117 0054 AFBF001C		sw	$ra, 28($sp)
 118 0058 AFB60018		sw	$s6, 24($sp)
 119 005c AFB50014		sw	$s5, 20($sp)
 120 0060 AFB40010		sw	$s4, 16($sp)
 121 0064 AFB3000C		sw	$s3, 12($sp)
 122 0068 AFB20008		sw	$s2, 8($sp)
 123 006c AFB10004		sw	$s1, 4($sp)
 124 0070 AFB00000		sw	$s0, 0($sp)
 125 0074               	
 126 0074 00808021		move	$s0, $a0				#save board pointer
 127 0078 00A08821		move	$s1, $a1				#save locaiton counter
 128 007c 00C09021		move	$s2, $a2				#save board bound
 129 0080 00E09821		move	$s3, $a3				#save board length
 130 0084               	
 131 0084               	#debug
 132 0084               	#jal	print_board
 133 0084               	
 134 0084 82150000		lb	$s5, 0($s0)				#save current value
 135 0088               	
 136 0088 12A0000B		beq	$s5, $zero, eval_not_found_fixed	#if the current location is 0 branch
 137 008c               	
 138 008c               	#fixed found if here
 139 008c               	
 140 008c 226BFFFF		addi	$t3, $s3, -1
 141 0090 162B0002		bne	$s1, $t3, no_last_fixed_space		#if its the last fixed space, continue
 142 0094               	
 143 0094               	
 144 0094               	#here it is the last fixed space
 145 0094 0C00004D		jal	validate_board
 146 0098               	
 147 0098               	#if v0 is 0, bad. if not good
 148 0098               	
 149 0098 08000043		j	eval_end
 150 009c               
 151 009c               no_last_fixed_space:
 152 009c               	
 153 009c 22040001		addi	$a0, $s0, 1				#tick board pointer
 154 00a0 22250001		addi	$a1, $s1, 1				#tick counter
 155 00a4 02403021		move	$a2, $s2				
 156 00a8 02603821		move	$a3, $s3
 157 00ac 00001021		move	$v0, $zero
 158 00b0               	
 159 00b0 0C000014		jal	eval					#recurse
 160 00b4               	
 161 00b4 08000043		j	eval_end
 162 00b8               
 163 00b8               eval_not_found_fixed:
 164 00b8               	
 165 00b8 34140001		li	$s4, 1					#s4 is our counter for the loop (cant use 0)
 166 00bc               	
 167 00bc               eval_loop:
 168 00bc               	
 169 00bc 22590001		addi	$t9, $s2, 1
 170 00c0 12990011		beq	$s4, $t9, eval_loop_done
 171 00c4               	
 172 00c4 A2140000		sb	$s4, 0($s0)				#write to board
 173 00c8 0C00004D		jal	validate_board				#validate
 174 00cc               	
 175 00cc 1040000B		beq	$v0, $zero, eval_loop_bottom		#branch if bad place
 176 00d0               	
 177 00d0 226BFFFF		addi	$t3, $s3, -1
 178 00d4 162B0001		bne	$s1, $t3, not_last_place
 179 00d8               	
 180 00d8               	#here it is the last place and v0 is 1 so return 1
 181 00d8 08000043		j	eval_end
 182 00dc               	
 183 00dc               	
 184 00dc               not_last_place:
 185 00dc 22040001		addi	$a0, $s0, 1				#tick board pointer
 186 00e0 22250001		addi	$a1, $s1, 1				#tick counter
 187 00e4 02403021		move	$a2, $s2				
 188 00e8 02603821		move	$a3, $s3
 189 00ec 00001021		move	$v0, $zero
 190 00f0               	
 191 00f0 0C000014		jal	eval					#recurse
 192 00f4               	
 193 00f4 10400001		beq	$v0, $zero, eval_loop_bottom
 194 00f8               	
 195 00f8 08000043		j	eval_end
 196 00fc               	
 197 00fc               eval_loop_bottom:
 198 00fc               	
 199 00fc A2000000		sb	$zero, 0($s0)				#rest board locaiton
 200 0100 22940001		addi	$s4, $s4, 1				#tick
 201 0104 0800002F		j	eval_loop
 202 0108               	
 203 0108               	
 204 0108               eval_loop_done:
 205 0108 08000043		j	eval_end
 206 010c               	
 207 010c               eval_end:
 208 010c               	
 209 010c 8FBF001C		lw	$ra, 28($sp)
 210 0110 8FB60018		lw	$s6, 24($sp)
 211 0114 8FB50014		lw	$s5, 20($sp)
 212 0118 8FB40010		lw	$s4, 16($sp)
 213 011c 8FB3000C		lw	$s3, 12($sp)
 214 0120 8FB20008		lw	$s2, 8($sp)
 215 0124 8FB10004		lw	$s1, 4($sp)
 216 0128 8FB00000		lw	$s0, 0($sp)
 217 012c 23BD0020		addi	$sp, $sp, 32
 218 0130 03E00008		jr	$ra
 219 0134               
 220 0134               
 221 0134               
 222 0134               
 223 0134               
 224 0134               
 225 0134               
 226 0134               #####################################################
 227 0134               #                    validate                       #
 228 0134               #####################################################
 229 0134               
 230 0134               #
 231 0134               # Name: validate_board
 232 0134               #
 233 0134               #
 234 0134               validate_board:
 235 0134 23BDFFF8		addi	$sp, $sp, -8
 236 0138 AFBF0004		sw	$ra, 4($sp)
 237 013c AFB00000		sw	$s0, 0($sp)
 238 0140               	
 239 0140 3C080000		la	$t0, board_size
     0144 35080000
 240 0148 81100000		lb	$s0, 0($t0)
 241 014c               	
 242 014c               	
 243 014c 3C040000		la	$a0, south_hints
     0150 34840000
 244 0154 3C050000		la	$a1, get_next_south
     0158 34A502EC
 245 015c 02003021		move	$a2, $s0
 246 0160               	
 247 0160 0C00005E		jal	generic_check_board
 248 0164               	
 249 0164 14400000		bne	$v0, $zero, done_validate
 250 0168               	
 251 0168               	
 252 0168               done_validate:
 253 0168 8FBF0004		lw	$ra, 4($sp)
 254 016c 8FB00000		lw	$s0, 0($sp)
 255 0170 23BD0008		addi	$sp, $sp, 8
 256 0174 03E00008		jr	$ra
 257 0178               
 258 0178               
 259 0178               #
 260 0178               # Name: generic_check_board
 261 0178               #
 262 0178               # Arguments:
 263 0178               #    a0: hint_pointer
 264 0178               #    a1: index_funct_pointer
 265 0178               #    a2: board_size
 266 0178               #
 267 0178               generic_check_board:
 268 0178 23BDFFDC		addi	$sp, $sp, -36
 269 017c AFBF0020		sw	$ra, 32($sp)
 270 0180 AFB7001C		sw	$s7, 28($sp)
 271 0184 AFB60018		sw	$s6, 24($sp)
 272 0188 AFB50014		sw	$s5, 20($sp)
 273 018c AFB40010		sw	$s4, 16($sp)
 274 0190 AFB3000C		sw	$s3, 12($sp)
 275 0194 AFB20008		sw	$s2, 8($sp)
 276 0198 AFB10004		sw	$s1, 4($sp)
 277 019c AFB00000		sw	$s0, 0($sp)
 278 01a0               	
 279 01a0               	
 280 01a0 00808021		move	$s0, $a0		#hint pointer
 281 01a4 00A08821		move	$s1, $a1		#index funct pointer
 282 01a8 00C09021		move	$s2, $a2		#board size
 283 01ac               	
 284 01ac 34130000		li	$s3, 0			#col counter
 285 01b0 34160001		li	$s6, 1			#defualt to pass
 286 01b4               		
 287 01b4               	
 288 01b4               generic_check_loop_col:
 289 01b4               
 290 01b4 12530026		beq	$s2, $s3, generic_check_loop_done_col
 291 01b8               	
 292 01b8               	
 293 01b8 34140000		li	$s4, 0			#row counter
 294 01bc 34150000		li	$s5, 0			#height counter
 295 01c0 340D0000		li	$t5, 0			#last building
 296 01c4               	
 297 01c4 82170000		lb	$s7, 0($s0)		#current hint
 298 01c8               	
 299 01c8               generic_check_loop_row:
 300 01c8               
 301 01c8               	#if next is greater, add to counter. if counter is == to hint, good. 
 302 01c8               	
 303 01c8               	
 304 01c8 12E00014		beq	$s7, $zero, generic_check_loop_done_row		#no hint, pass
 305 01cc               
 306 01cc 12540013		beq	$s2, $s4, generic_check_loop_done_row		#normal loop end
 307 01d0               	
 308 01d0               	################### Main logic ########################
 309 01d0               	
 310 01d0               	
 311 01d0 2284FFFF		addi	$a0, $s4, -1		#backup one
 312 01d4 02602821		move	$a1, $s3
 313 01d8 02403021		move	$a2, $s2		#alwas load boar size even though north and west dont need
 314 01dc               	
 315 01dc 23BDFFFC		addi	$sp, $sp, -4		#have to save restore $t5
 316 01e0 AFAD0000		sw	$t5, 0($sp)
 317 01e4               	
 318 01e4 0220F809		jalr	$s1			#call indexer funct
 319 01e8               	
 320 01e8 8FAD0000		lw	$t5, 0($sp)
 321 01ec 23BD0004		addi	$sp, $sp, 4
 322 01f0               	
 323 01f0 00405021		move	$t2, $v0		#set cur
 324 01f4               	
 325 01f4               	
 326 01f4 11400011		beq	$t2, $zero, generic_check_loop_found_zero	#found zero, not finished, valid
 327 01f8               	
 328 01f8 21AE0001		addi	$t6, $t5, 1
 329 01fc 014E082A		blt	$t2, $t6, pass_add
     0200 14200003
 330 0204               	
 331 0204 22B50001		addi	$s5, $s5, 1					#add to new if its last
 332 0208 01406821		move	$t5, $t2					#set as new greatest
 333 020c 01A02021		move	$a0, $t5
 334 0210               	
 335 0210               pass_add:
 336 0210               
 337 0210 08000085		j	continue_check_loop
 338 0214               	
 339 0214               continue_check_loop:
 340 0214               	
 341 0214               	########################################################
 342 0214               	#move	$a0, $v0	#debu
 343 0214               	#jal	print_number	#devg
 344 0214               	
 345 0214               	
 346 0214 22940001		addi	$s4, $s4, 1
 347 0218 08000072		j	generic_check_loop_row
 348 021c               
 349 021c               generic_check_loop_done_row:
 350 021c               	
 351 021c 02A02021		move	$a0, $s5
 352 0220 0C0001E4		jal	print_number
 353 0224 02E02021		move	$a0, $s7
 354 0228 0C0001E4		jal	print_number
 355 022c 3C040000		la	$a0, new_line_char
     0230 34840000
 356 0234 0C0001D5		jal	print_string
 357 0238 16B70003		bne	$s5, $s7, check_fail	#fail
 358 023c               	
 359 023c               generic_check_loop_found_zero:
 360 023c               	
 361 023c 22100001		addi	$s0, $s0, 1
 362 0240               	#la	$a0, new_line_char
 363 0240               	#jal	print_string
 364 0240               	
 365 0240 22730001		addi	$s3, $s3, 1
 366 0244 0800006D		j	generic_check_loop_col
 367 0248               	
 368 0248               	############### fail #################
 369 0248               check_fail:
 370 0248 34160000		li	$s6, 0				#reutrn 0
 371 024c 08000094		j	generic_check_loop_done_col	#break all loops	
 372 0250               
 373 0250               generic_check_loop_done_col:
 374 0250               
 375 0250 0C000163		jal	print_board
 376 0254               
 377 0254 02C01021		move	$v0, $s6	#reutrn result
 378 0258               	
 379 0258 8FBF0020		lw	$ra, 32($sp)
 380 025c 8FB7001C		lw	$s7, 28($sp)
 381 0260 8FB60018		lw	$s6, 24($sp)
 382 0264 8FB50014		lw	$s5, 20($sp)
 383 0268 8FB40010		lw	$s4, 16($sp)
 384 026c 8FB3000C		lw	$s3, 12($sp)
 385 0270 8FB20008		lw	$s2, 8($sp)
 386 0274 8FB10004		lw	$s1, 4($sp)
 387 0278 8FB00000		lw	$s0, 0($sp)
 388 027c 23BD0024		addi	$sp, $sp, 36
 389 0280 03E00008		jr	$ra
 390 0284               	
 391 0284               	
 392 0284               	
 393 0284               	
 394 0284               
 395 0284               
 396 0284               #
 397 0284               # Name: get_next_north
 398 0284               #
 399 0284               # Arguments:
 400 0284               #    a0: col index
 401 0284               #    a1: current_row_index
 402 0284               #
 403 0284               get_next_north:
 404 0284 23BDFFFC		addi	$sp, $sp, -4
 405 0288 AFBF0000		sw	$ra, 0($sp)
 406 028c               	
 407 028c 20840001		addi	$a0, $a0, 1
 408 0290               	
 409 0290 0C0000C4		jal	read_board
 410 0294               	
 411 0294 8FBF0000		lw	$ra, 0($sp)
 412 0298 23BD0004		addi	$sp, $sp, 4
 413 029c 03E00008		jr	$ra
 414 02a0               
 415 02a0               #
 416 02a0               # Name: get_next_west
 417 02a0               #
 418 02a0               # Arguments:
 419 02a0               #    a0: row index
 420 02a0               #    a1: current_col_index
 421 02a0               #
 422 02a0               get_next_west:
 423 02a0 23BDFFFC		addi	$sp, $sp, -4
 424 02a4 AFBF0000		sw	$ra, 0($sp)
 425 02a8               	
 426 02a8 00A04021		move	$t0, $a1
 427 02ac 20850001		addi	$a1, $a0, 1
 428 02b0 01002021		move	$a0, $t0
 429 02b4               	
 430 02b4 0C0000C4		jal	read_board
 431 02b8               	
 432 02b8 8FBF0000		lw	$ra, 0($sp)
 433 02bc 23BD0004		addi	$sp, $sp, 4
 434 02c0 03E00008		jr	$ra
 435 02c4               
 436 02c4               #
 437 02c4               # Name: get_next_east
 438 02c4               #
 439 02c4               # Arguments:
 440 02c4               #    a0: row index
 441 02c4               #    a1: current_col_index
 442 02c4               #    a2: board size
 443 02c4               #
 444 02c4               get_next_east:
 445 02c4 23BDFFFC		addi	$sp, $sp, -4
 446 02c8 AFBF0000		sw	$ra, 0($sp)
 447 02cc               	
 448 02cc 00A04021		move	$t0, $a1
 449 02d0 20850001		addi	$a1, $a0, 1
 450 02d4 00C52822		sub	$a1, $a2, $a1
 451 02d8 01002021		move	$a0, $t0
 452 02dc               	
 453 02dc 0C0000C4		jal	read_board
 454 02e0               	
 455 02e0 8FBF0000		lw	$ra, 0($sp)
 456 02e4 23BD0004		addi	$sp, $sp, 4
 457 02e8 03E00008		jr	$ra
 458 02ec               	
 459 02ec               #
 460 02ec               # Name: get_next_south
 461 02ec               #
 462 02ec               # Arguments:
 463 02ec               #    a0: col index
 464 02ec               #    a1: current_row_index
 465 02ec               #    a2: board size
 466 02ec               #
 467 02ec               get_next_south:
 468 02ec 23BDFFFC		addi	$sp, $sp, -4
 469 02f0 AFBF0000		sw	$ra, 0($sp)
 470 02f4               	
 471 02f4               	
 472 02f4 20840001		addi	$a0, $a0, 1
 473 02f8               	
 474 02f8 00C42022		sub	$a0, $a2, $a0		#reverse index
 475 02fc 2084FFFF		addi	$a0, $a0, -1
 476 0300               	
 477 0300 0C0000C4		jal	read_board
 478 0304               	
 479 0304 8FBF0000		lw	$ra, 0($sp)
 480 0308 23BD0004		addi	$sp, $sp, 4
 481 030c 03E00008		jr	$ra
 482 0310               
 483 0310               
 484 0310               
 485 0310               
 486 0310               #####################################################
 487 0310               #               Data Acces Functions                #
 488 0310               #####################################################
 489 0310               
 490 0310               #
 491 0310               # Name: read_board
 492 0310               #
 493 0310               # Arguments:
 494 0310               #    a0: x index
 495 0310               #    a1: y index
 496 0310               #
 497 0310               read_board:
 498 0310 3C080000		la	$t0, board_size
     0314 35080000
 499 0318 81080000		lb	$t0, 0($t0)
 500 031c               	#t0 has board width
 501 031c               	
 502 031c 01040018		mul	$t0, $t0, $a0
     0320 00004012
 503 0324 01054020		add	$t0, $t0, $a1
 504 0328               	
 505 0328 3C090000		la	$t1, board
     032c 35290000
 506 0330 01284020		add	$t0, $t1, $t0
 507 0334 81020000		lb	$v0, 0($t0)
 508 0338               	
 509 0338 03E00008		jr	$ra
 510 033c               	
 511 033c               #
 512 033c               # Name: write_board
 513 033c               #
 514 033c               # Arguments:
 515 033c               #    a0: x index
 516 033c               #    a1: y index
 517 033c               #    a2: value
 518 033c               #
 519 033c               write_board:
 520 033c 3C080000		la	$t0, board_size
     0340 35080000
 521 0344 81080000		lb	$t0, 0($t0)
 522 0348               	#t0 has board width
 523 0348               	
 524 0348 01040018		mul	$t0, $t0, $a0
     034c 00004012
 525 0350 01054020		add	$t0, $t0, $a1
 526 0354               	
 527 0354 3C090000		la	$t1, board
     0358 35290000
 528 035c 01284020		add	$t0, $t1, $t0
 529 0360 A1060000		sb	$a2, 0($t0)
 530 0364               	
 531 0364 03E00008		jr	$ra
 532 0368               	
 533 0368               
 534 0368               #####################################################
 535 0368               #               Data Input Functions                #
 536 0368               #####################################################
 537 0368               
 538 0368               #
 539 0368               # Name: read_input
 540 0368               #
 541 0368               read_input:
 542 0368 23BDFFF8		addi	$sp, $sp, -8
 543 036c AFBF0004		sw	$ra, 4($sp)
 544 0370 AFB00000		sw	$s0, 0($sp)
 545 0374               
 546 0374               	#read user input board bounds
 547 0374 34020005		li	$v0, READ_INT
 548 0378 0000000C		syscall
 549 037c               	
 550 037c               	#confirm starting board bounds
 551 037c 34080003		li	$t0, 3
 552 0380 34090009		li	$t1, 9
 553 0384 3C040000		la	$a0, board_input_error
     0388 34840000
 554 038c 0048082A		blt	$v0, $t0, read_input_error
     0390 14200026
 555 0394 0122082A		blt	$t1, $v0, read_input_error
     0398 14200024
 556 039c               	
 557 039c               	#write the borad bounds
 558 039c 3C080000		la	$t0, board_size
     03a0 35080000
 559 03a4 A1020000		sb	$v0, 0($t0)
 560 03a8               	
 561 03a8 00408021		move	$s0, $v0	#s0 will contian the board size
 562 03ac               	
 563 03ac 3C040000		la	$a0, north_hints
     03b0 34840000
 564 03b4 02002821		move	$a1, $s0
 565 03b8 0C000144		jal	load_hints
 566 03bc 1040001B		beq	$v0, $zero, read_input_error
 567 03c0               	
 568 03c0               	
 569 03c0 3C040000		la	$a0, east_hints
     03c4 34840000
 570 03c8 02002821		move	$a1, $s0
 571 03cc 0C000144		jal	load_hints
 572 03d0 10400016		beq	$v0, $zero, read_input_error
 573 03d4               
 574 03d4               
 575 03d4 3C040000		la	$a0, south_hints
     03d8 34840000
 576 03dc 02002821		move	$a1, $s0
 577 03e0 0C000144		jal	load_hints
 578 03e4 10400011		beq	$v0, $zero, read_input_error
 579 03e8               
 580 03e8               
 581 03e8 3C040000		la	$a0, west_hints
     03ec 34840000
 582 03f0 02002821		move	$a1, $s0
 583 03f4 0C000144		jal	load_hints
 584 03f8 1040000C		beq	$v0, $zero, read_input_error
 585 03fc               	
 586 03fc               	
 587 03fc               	
 588 03fc 34020005		li	$v0, READ_INT
 589 0400 0000000C		syscall
 590 0404               	
 591 0404 3C040000		la	$a0, fixed_input_error
     0408 34840000
 592 040c 0040082A		blt	$v0, $zero, read_input_error
     0410 14200006
 593 0414               	
 594 0414 00402021		move	$a0, $v0
 595 0418 02002821		move	$a1, $s0
 596 041c 0C000111		jal	load_fixed
 597 0420 10400002		beq	$v0, $zero, read_input_error
 598 0424               	
 599 0424               
 600 0424               
 601 0424               	#all input is good
 602 0424 34020001		li	$v0, 1		#return 1
 603 0428 0800010D		j	read_input_end
 604 042c               
 605 042c               	
 606 042c               read_input_error:
 607 042c               	
 608 042c 0C0001D5		jal	print_string
 609 0430 34020000		li	$v0, 0		#return 0
 610 0434               
 611 0434               read_input_end:
 612 0434 8FBF0004		lw	$ra, 4($sp)
 613 0438 8FB00000		lw	$s0, 0($sp)
 614 043c 23BD0008		addi	$sp, $sp, 8
 615 0440 03E00008		jr	$ra
 616 0444               
 617 0444               
 618 0444               
 619 0444               
 620 0444               
 621 0444               
 622 0444               
 623 0444               #
 624 0444               # Name: load_fixed
 625 0444               #
 626 0444               # Arguments: 
 627 0444               #    $a0: num of fixed towers
 628 0444               #    $a1: board Size
 629 0444               #
 630 0444               load_fixed:
 631 0444 23BDFFEC		addi	$sp, $sp, -20
 632 0448 AFBF0010		sw	$ra, 16($sp)
 633 044c AFB3000C		sw	$s3, 12($sp)
 634 0450 AFB20008		sw	$s2, 8($sp)
 635 0454 AFB10004		sw	$s1, 4($sp)
 636 0458 AFB00000		sw	$s0, 0($sp)
 637 045c               	
 638 045c 00808021		move	$s0, $a0	#s0 contains number of fixed towers
 639 0460 34110000		li	$s1, 0		#conter
 640 0464 00A09021		move	$s2, $a1
 641 0468               	
 642 0468 34130001		li	$s3, 1
 643 046c               	
 644 046c               read_fixed_loop:
 645 046c               
 646 046c 12300020		beq	$s1, $s0, load_fixed_done
 647 0470               	
 648 0470               	#load x
 649 0470 34020005		li	$v0, READ_INT
 650 0474 0000000C		syscall
 651 0478 00404021		move	$t0, $v0
 652 047c               	
 653 047c 0100082A		blt	$t0, $zero, size_fixed_error
     0480 14200017
 654 0484 0248082A		blt	$s2, $t0, size_fixed_error
     0488 14200015
 655 048c               	
 656 048c               	#load y
 657 048c 34020005		li	$v0, READ_INT
 658 0490 0000000C		syscall
 659 0494 00404821		move	$t1, $v0
 660 0498               	
 661 0498 0120082A		blt	$t1, $zero, size_fixed_error
     049c 14200010
 662 04a0 0249082A		blt	$s2, $t1, size_fixed_error
     04a4 1420000E
 663 04a8               	
 664 04a8               	#load value
 665 04a8 34020005		li	$v0, READ_INT
 666 04ac 0000000C		syscall
 667 04b0 00405021		move	$t2, $v0
 668 04b4               	
 669 04b4 34190001		li	$t9, 1
 670 04b8 0159082A		blt	$t2, $t9, size_fixed_error
     04bc 14200008
 671 04c0 024A082A		blt	$s2, $t2, size_fixed_error
     04c4 14200006
 672 04c8               	
 673 04c8 01002021		move	$a0, $t0
 674 04cc 01202821		move	$a1, $t1
 675 04d0 01403021		move	$a2, $t2
 676 04d4 0C0000CF		jal	write_board
 677 04d8               	
 678 04d8               	
 679 04d8 22310001		addi	$s1, $s1, 1
 680 04dc 0800011B		j	read_fixed_loop	
 681 04e0               
 682 04e0               size_fixed_error:
 683 04e0               	
 684 04e0 3C040000		la	$a0, fixed_input_error
     04e4 34840000
 685 04e8 34130000		li	$s3, 0
 686 04ec 0800013C		j	load_fixed_done
 687 04f0               	
 688 04f0               load_fixed_done:
 689 04f0 02601021		move	$v0, $s3
 690 04f4 8FBF0010		lw	$ra, 16($sp)
 691 04f8 8FB3000C		lw	$s3, 12($sp)
 692 04fc 8FB20008		lw	$s2, 8($sp)
 693 0500 8FB10004		lw	$s1, 4($sp)
 694 0504 8FB00000		lw	$s0, 0($sp)
 695 0508 23BD0014		addi	$sp, $sp, 20
 696 050c 03E00008		jr	$ra
 697 0510               
 698 0510               
 699 0510               
 700 0510               
 701 0510               
 702 0510               
 703 0510               	
 704 0510               
 705 0510               #
 706 0510               # Name: load_hints
 707 0510               #
 708 0510               # Arguments: 
 709 0510               #    $a0: hint array pointer
 710 0510               #    $a1: board size
 711 0510               #
 712 0510               load_hints:
 713 0510 23BDFFF0		addi	$sp, $sp, -16
 714 0514 AFBF000C		sw	$ra, 12($sp)
 715 0518 AFB20008		sw	$s2, 8($sp)
 716 051c AFB10004		sw	$s1, 4($sp)
 717 0520 AFB00000		sw	$s0, 0($sp)
 718 0524               	
 719 0524 00808021		move	$s0, $a0
 720 0528 00A08821		move	$s1, $a1
 721 052c               	
 722 052c 34080000		li	$t0, 0		#counter
 723 0530 34130001		li	$s3, 1
 724 0534               read_input_loop:
 725 0534               	
 726 0534 1111000E		beq	$t0, $s1, load_hints_done
 727 0538               	
 728 0538 34020005		li	$v0, READ_INT
 729 053c 0000000C		syscall
 730 0540               	
 731 0540 0040082A		blt	$v0, $zero, size_input_error
     0544 14200006
 732 0548 0222082A		blt	$s1, $v0, size_input_error
     054c 14200004
 733 0550               	
 734 0550               	
 735 0550 A2020000		sb	$v0, 0($s0)
 736 0554 22100001		addi	$s0, $s0, 1
 737 0558               
 738 0558 21080001		addi	$t0, $t0, 1
 739 055c 0800014D		j	read_input_loop
 740 0560               
 741 0560               	
 742 0560               size_input_error:
 743 0560               	
 744 0560 3C040000		la	$a0, illegal_input_error
     0564 34840000
 745 0568 34130000		li	$s3, 0
 746 056c 0800015C		j	load_hints_done
 747 0570               	
 748 0570               load_hints_done:
 749 0570 02601021		move	$v0, $s3
 750 0574 8FBF000C		lw	$ra, 12($sp)
 751 0578 8FB10008		lw	$s1, 8($sp)
 752 057c 8FB10004		lw	$s1, 4($sp)
 753 0580 8FB00000		lw	$s0, 0($sp)
 754 0584 23BD0010		addi	$sp, $sp, 16
 755 0588 03E00008		jr	$ra
 756 058c               	
 757 058c               	
 758 058c               	
 759 058c               	
 760 058c               
 761 058c               #####################################################
 762 058c               #               Print functions                     #
 763 058c               #####################################################
 764 058c               
 765 058c               #
 766 058c               # Name: print board
 767 058c               #
 768 058c               print_board:
 769 058c               	
 770 058c 23BDFFEC		addi	$sp, $sp, -20
 771 0590 AFBF0010		sw	$ra, 16($sp)
 772 0594 AFB3000C		sw	$s3, 12($sp)
 773 0598 AFB20008		sw	$s2, 8($sp)
 774 059c AFB10004		sw	$s1, 4($sp)
 775 05a0 AFB00000		sw	$s0, 0($sp)
 776 05a4               	
 777 05a4 3C100000		la	$s0, board_size
     05a8 36100000
 778 05ac 82100000		lb	$s0, 0($s0)
 779 05b0 3C110000		la	$s1, board		#s1 contains board pointer
     05b4 36310000
 780 05b8 34120000		li	$s2, 0
 781 05bc               
 782 05bc 3C040000		la	$a0, north_hints
     05c0 34840000
 783 05c4 0C0001BC		jal	print_x_hints
 784 05c8               
 785 05c8               print_board_loop_row:
 786 05c8               
 787 05c8 1250001B		beq	$s2, $s0, print_board_done
 788 05cc               
 789 05cc 0C00019C		jal	print_break_row		#print break
 790 05d0               
 791 05d0 3C040000		la	$a0, west_hints
     05d4 34840000
 792 05d8 02402821		move	$a1, $s2
 793 05dc 0C0001B4		jal	print_y_hint		#print y hint
 794 05e0               	
 795 05e0 3C040000		la	$a0, spaces
     05e4 34840000
 796 05e8 0C0001D5		jal	print_string
 797 05ec               
 798 05ec 3C040000		la	$a0, board_space_front
     05f0 34840000
 799 05f4 0C0001D5		jal	print_string
 800 05f8               	
 801 05f8               
 802 05f8 00009821		move	$s3, $zero
 803 05fc               
 804 05fc               
 805 05fc               print_board_loop_col:
 806 05fc               
 807 05fc 12700008		beq	$s3, $s0, print_board_loop_col_done
 808 0600               
 809 0600 82240000		lb	$a0, 0($s1)
 810 0604 0C0001D8		jal	print_number_exclude
 811 0608               
 812 0608 3C040000		la	$a0, board_space_mid
     060c 34840000
 813 0610 0C0001D5		jal	print_string
 814 0614               	
 815 0614 22730001		addi	$s3, $s3, 1
 816 0618 22310001		addi	$s1, $s1, 1
 817 061c 0800017F		j	print_board_loop_col
 818 0620               	
 819 0620               print_board_loop_col_done:
 820 0620               	
 821 0620 3C040000		la	$a0, east_hints
     0624 34840000
 822 0628 02402821		move	$a1, $s2
 823 062c 0C0001B4		jal	print_y_hint
 824 0630               	
 825 0630               	#addi	$s1, $s1, 1
 826 0630 22520001		addi	$s2, $s2, 1
 827 0634               	
 828 0634 08000172		j	print_board_loop_row
 829 0638               
 830 0638               print_board_done:
 831 0638               
 832 0638 0C00019C		jal	print_break_row
 833 063c               
 834 063c 3C040000		la	$a0, south_hints
     0640 34840000
 835 0644 0C0001BC		jal	print_x_hints
 836 0648               	
 837 0648 3C040000		la	$a0, new_line_char
     064c 34840000
 838 0650 0C0001D5		jal	print_string
 839 0654               
 840 0654 8FBF0010		lw	$ra, 16($sp)
 841 0658 8FB3000C		lw	$s3, 12($sp)
 842 065c 8FB20008		lw	$s2, 8($sp)
 843 0660 8FB10004		lw	$s1, 4($sp)
 844 0664 8FB00000		lw	$s0, 0($sp)
 845 0668 23BD0014		addi	$sp, $sp, 20
 846 066c 03E00008		jr	$ra
 847 0670               
 848 0670               
 849 0670               #
 850 0670               # Name: Print break row
 851 0670               #
 852 0670               print_break_row:
 853 0670               	
 854 0670 23BDFFFC		addi	$sp, $sp, -4
 855 0674 AFBF0000		sw	$ra, 0($sp)
 856 0678               
 857 0678 3C040000		la	$a0, new_line_char
     067c 34840000
 858 0680 0C0001D5		jal	print_string
 859 0684               
 860 0684 3C040000		la	$a0, spacess
     0688 34840000
 861 068c 0C0001D5		jal	print_string
 862 0690               	
 863 0690 3C090000		la      $t1, board_size
     0694 35290000
 864 0698 81290000		lb      $t1, 0($t1)
 865 069c               
 866 069c 34080000		li	$t0, 0
 867 06a0               
 868 06a0               
 869 06a0               print_break_row_loop:
 870 06a0               	
 871 06a0 11280005		beq	$t1, $t0, print_break_row_done
 872 06a4               
 873 06a4 3C040000		la	$a0, board_row_break_part
     06a8 34840000
 874 06ac 0C0001D5		jal	print_string
 875 06b0               
 876 06b0 21080001		addi	$t0, $t0, 1
 877 06b4               
 878 06b4 080001A8		j	print_break_row_loop
 879 06b8               
 880 06b8               print_break_row_done:
 881 06b8 3C040000		la	$a0, plus_char_break
     06bc 34840000
 882 06c0 0C0001D5		jal	print_string
 883 06c4               	
 884 06c4 8FBF0000		lw	$ra, 0($sp)
 885 06c8 23BD0004		addi	$sp, $sp, 4
 886 06cc               	
 887 06cc 03E00008		jr	$ra
 888 06d0               
 889 06d0               
 890 06d0               #
 891 06d0               # Name: print y hint
 892 06d0               #
 893 06d0               # Arguments:
 894 06d0               #    $a0: pointer to array
 895 06d0               #    $a1: index
 896 06d0               #
 897 06d0               print_y_hint:
 898 06d0 23BDFFFC		addi	$sp, $sp, -4
 899 06d4 AFBF0000		sw	$ra, 0($sp)
 900 06d8               
 901 06d8 00852020		add	$a0, $a0, $a1
 902 06dc 80840000		lb	$a0, 0($a0)
 903 06e0 0C0001D8		jal	print_number_exclude
 904 06e4               
 905 06e4 8FBF0000		lw	$ra, 0($sp)
 906 06e8 23BD0004		addi	$sp, $sp, 4
 907 06ec 03E00008		jr	$ra
 908 06f0               
 909 06f0               
 910 06f0               
 911 06f0               #
 912 06f0               # Name: prints x axis hints
 913 06f0               #
 914 06f0               # Arguments: 
 915 06f0               #     $a0: pointer to hint array
 916 06f0               #
 917 06f0               print_x_hints:
 918 06f0 23BDFFFC		addi	$sp, $sp, -4
 919 06f4 AFBF0000		sw	$ra, 0($sp)
 920 06f8               	
 921 06f8 00805021		move	$t2, $a0
 922 06fc               
 923 06fc 3C090000		la      $t1, board_size
     0700 35290000
 924 0704 81290000		lb      $t1, 0($t1)
 925 0708               
 926 0708 34080000		li	$t0, 0
 927 070c               	
 928 070c 3C040000		la	$a0, spacess
     0710 34840000
 929 0714 0C0001D5		jal	print_string
 930 0718               
 931 0718               print_x_hints_loop: 
 932 0718               	
 933 0718 1128000B		beq	$t1, $t0, print_x_hints_done
 934 071c               	
 935 071c 3C040000		la	$a0, spacess
     0720 34840000
 936 0724 0C0001D5		jal	print_string
 937 0728               
 938 0728 81440000		lb	$a0, 0($t2)
 939 072c               	
 940 072c 0C0001D8		jal	print_number_exclude
 941 0730               
 942 0730 3C040000		la	$a0, spaces
     0734 34840000
 943 0738 0C0001D5		jal	print_string
 944 073c               	
 945 073c 214A0001		addi	$t2, $t2, 1
 946 0740 21080001		addi	$t0, $t0, 1
 947 0744               
 948 0744 080001C6		j	print_x_hints_loop
 949 0748               
 950 0748               print_x_hints_done:
 951 0748               	
 952 0748 8FBF0000		lw	$ra, 0($sp)
 953 074c 23BD0004		addi	$sp, $sp, 4
 954 0750               	
 955 0750 03E00008		jr	$ra
 956 0754               
 957 0754               
 958 0754               
 959 0754               print_string:
 960 0754 34020004		li	$v0, PRINT_STRING
 961 0758 0000000C		syscall
 962 075c               
 963 075c 03E00008		jr	$ra
 964 0760               
 965 0760               
 966 0760               
 967 0760               #
 968 0760               # Name: print_number_exclude
 969 0760               #    prints numbers excluding zero
 970 0760               #
 971 0760               #
 972 0760               print_number_exclude:
 973 0760 23BDFFFC		addi	$sp, $sp, -4
 974 0764 AFBF0000		sw	$ra, 0($sp)
 975 0768               	
 976 0768 10800003		beq	$a0, $zero, print_space
 977 076c               	
 978 076c 34020001		li	$v0, PRINT_INT
 979 0770 0000000C		syscall
 980 0774               	
 981 0774 080001E1		j	done_print_number_exclude
 982 0778               	
 983 0778               print_space:
 984 0778 3C040000		la	$a0, spaces
     077c 34840000
 985 0780 0C0001D5		jal	print_string
 986 0784               	
 987 0784               done_print_number_exclude:
 988 0784               
 989 0784 8FBF0000		lw	$ra, 0($sp)
 990 0788 23BD0004		addi	$sp, $sp, 4
 991 078c 03E00008		jr	$ra
 992 0790               
 993 0790               #
 994 0790               # Name: print_number
 995 0790               #    prints numbers
 996 0790               #
 997 0790               #
 998 0790               print_number:
 999 0790 34020001		li	$v0, PRINT_INT
1000 0794 0000000C		syscall
1001 0798               
1002 0798 03E00008		jr	$ra
1003 079c               
1004 079c               
1005 079c               
1006 079c               


EXIT                           = 0000000A   
PRINT_INT                      = 00000001   
PRINT_STRING                   = 00000004   
READ_INT                       = 00000005   
board                            00000001 R  data 
board_input_error                0000019B R  data 
board_row_break_part             00000181 R  data 
board_size                       00000000 R  data 
board_space_back                 00000190 R  data 
board_space_front                00000189 R  data 
board_space_mid                  0000018C R  data 
check_fail                       00000248 R  text 
continue_check_loop              00000214 R  text 
done_print_number_exclude        00000784 R  text 
done_validate                    00000168 R  text 
east_hints                       00000141 R  data 
eval                             00000050 R  text 
eval_end                         0000010C R  text 
eval_loop                        000000BC R  text 
eval_loop_bottom                 000000FC R  text 
eval_loop_done                   00000108 R  text 
eval_not_found_fixed             000000B8 R  text 
fixed_input_error                00000230 R  data 
fixed_number_input_error         000001F7 R  data 
generic_check_board              00000178 R  text 
generic_check_loop_col           000001B4 R  text 
generic_check_loop_done_col      00000250 R  text 
generic_check_loop_done_row      0000021C R  text 
generic_check_loop_found_zero    0000023C R  text 
generic_check_loop_row           000001C8 R  text 
get_next_east                    000002C4 R  text 
get_next_north                   00000284 R  text 
get_next_south                   000002EC R  text 
get_next_west                    000002A0 R  text 
illegal_input_error              000001C9 R  data 
load_fixed                       00000444 R  text 
load_fixed_done                  000004F0 R  text 
load_hints                       00000510 R  text 
load_hints_done                  00000570 R  text 
main                             00000000 R  text 
main_done                        00000040 R  text 
new_line_char                    00000194 R  data 
no_last_fixed_space              0000009C R  text 
north_hints                      00000101 R  data 
not_last_place                   000000DC R  text 
pass_add                         00000210 R  text 
plus_char_break                  00000186 R  data 
print_board                      0000058C R  text 
print_board_done                 00000638 R  text 
print_board_loop_col             000005FC R  text 
print_board_loop_col_done        00000620 R  text 
print_board_loop_row             000005C8 R  text 
print_break_row                  00000670 R  text 
print_break_row_done             000006B8 R  text 
print_break_row_loop             000006A0 R  text 
print_number                     00000790 R  text 
print_number_exclude             00000760 R  text 
print_space                      00000778 R  text 
print_string                     00000754 R  text 
print_x_hints                    000006F0 R  text 
print_x_hints_done               00000748 R  text 
print_x_hints_loop               00000718 R  text 
print_y_hint                     000006D0 R  text 
read_board                       00000310 R  text 
read_fixed_loop                  0000046C R  text 
read_input                       00000368 R  text 
read_input_end                   00000434 R  text 
read_input_error                 0000042C R  text 
read_input_loop                  00000534 R  text 
size_fixed_error                 000004E0 R  text 
size_input_error                 00000560 R  text 
south_hints                      00000121 R  data 
spaces                           00000199 R  data 
spacess                          00000196 R  data 
validate_board                   00000134 R  text 
west_hints                       00000161 R  data 
write_board                      0000033C R  text 
