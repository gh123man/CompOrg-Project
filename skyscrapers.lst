   1 0000               
   2 0000               
   3 0000               
   4 0000               PRINT_INT = 1
   5 0000               PRINT_STRING = 4
   6 0000               READ_INT = 5
   7 0000               EXIT = 10
   8 0000               
   9 0000               	.data
  10 0000               	.align	0
  11 0000               
  12 0000               board_size:
  13 0000 00      		.byte	0
  14 0001               board:
  15 0001 00000000		.space	256
          00000000
          00000000
          00000000
          00000000
          00000000
  16 0101               north_hints:
  17 0101 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  18 0121               south_hints:
  19 0121 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  20 0141               east_hints:
  21 0141 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  22 0161               west_hints:
  23 0161 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  24 0181               
  25 0181               board_row_break_part:
  26 0181 2B2D2D2D		.asciiz "+---"
          00      
  27 0186               plus_char_break:
  28 0186 2B0A00  		.asciiz "+\n"
  29 0189               board_space_front:
  30 0189 7C2000  		.asciiz "| "
  31 018c               board_space_mid:
  32 018c 207C2000		.asciiz " | "
  33 0190               board_space_back:
  34 0190 207C0A00		.asciiz " |\n"
  35 0194               new_line_char:
  36 0194 0A00    		.asciiz "\n"
  37 0196               spacess:
  38 0196 202000  		.asciiz "  "
  39 0199               spaces:
  40 0199 2000    		.asciiz " "
  41 019b               	
  42 019b               board_input_error:
  43 019b 0A496E76		.asciiz "\nInvalid board size, Skyscrapers terminating\n"
          616C6964
          20626F61
          72642073
          697A652C
          20536B79
  44 01c9               illegal_input_error:
  45 01c9 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  46 01f7               fixed_number_input_error:
  47 01f7 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
  48 0230               fixed_input_error:
  49 0230 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
  50 0265               	
  51 0000               	.text
  52 0000               	.align	2
  53 0000               
  54 0000               #####################################################
  55 0000               #                  Program area                     #
  56 0000               #####################################################
  57 0000               
  58 0000               
  59 0000               #
  60 0000               # Name: Main
  61 0000               #
  62 0000               main:
  63 0000 23BDFFF8		addi	$sp, $sp, -8
  64 0004 AFBF0004		sw	$ra, 4($sp)
  65 0008 AFB00000		sw	$s0, 0($sp)
  66 000c               	
  67 000c 0C00011F		jal	read_input
  68 0010 1040000B		beq	$v0, $zero, main_done	#end if it returned false.
  69 0014               	
  70 0014 0C0001A8		jal	print_board
  71 0018               	
  72 0018               	
  73 0018 3C040000		la	$a0, board
     001c 34840000
  74 0020 34050000		li	$a1, 0
  75 0024 3C080000		la	$t0, board_size
     0028 35080000
  76 002c 81060000		lb	$a2, 0($t0)
  77 0030 00C60018		mul	$a3, $a2, $a2
     0034 00003812
  78 0038               	
  79 0038 0C000014		jal	eval
  80 003c               	
  81 003c 0C0001A8		jal	print_board
  82 0040               
  83 0040               main_done:
  84 0040 8FBF0004		lw	$ra, 4($sp)
  85 0044 8FB00000		lw	$s0, 0($sp)
  86 0048 23BD0008		addi	$sp, $sp, 8
  87 004c 03E00008		jr	$ra
  88 0050               
  89 0050               
  90 0050               
  91 0050               
  92 0050               #####################################################
  93 0050               #                    Sim eval                       #
  94 0050               #####################################################
  95 0050               
  96 0050               #
  97 0050               # Name: eval
  98 0050               #
  99 0050               # Arguments:
 100 0050               #    a0: board location pointer
 101 0050               #    a1: board locaiton counter
 102 0050               #    a2: board bound
 103 0050               #    a3: board length
 104 0050               #
 105 0050               eval:
 106 0050 23BDFFE0		addi	$sp, $sp, -32
 107 0054 AFBF001C		sw	$ra, 28($sp)
 108 0058 AFB60018		sw	$s6, 24($sp)
 109 005c AFB50014		sw	$s5, 20($sp)
 110 0060 AFB40010		sw	$s4, 16($sp)
 111 0064 AFB3000C		sw	$s3, 12($sp)
 112 0068 AFB20008		sw	$s2, 8($sp)
 113 006c AFB10004		sw	$s1, 4($sp)
 114 0070 AFB00000		sw	$s0, 0($sp)
 115 0074               	
 116 0074 00808021		move	$s0, $a0				#save board pointer
 117 0078 00A08821		move	$s1, $a1				#save locaiton counter
 118 007c 00C09021		move	$s2, $a2				#save board bound
 119 0080 00E09821		move	$s3, $a3				#save board length
 120 0084               	
 121 0084 82150000		lb	$s5, 0($s0)				#save current value
 122 0088               	
 123 0088 12A0000B		beq	$s5, $zero, eval_not_found_fixed	#if the current location is 0 branch
 124 008c               	
 125 008c               	#fixed found if here
 126 008c               	
 127 008c 226BFFFF		addi	$t3, $s3, -1
 128 0090 162B0002		bne	$s1, $t3, no_last_fixed_space		#if its the last fixed space, continue
 129 0094               	
 130 0094               	
 131 0094               	#here it is the last fixed space
 132 0094 0C00004D		jal	validate_board
 133 0098               	
 134 0098               	#if v0 is 0, bad. if not good
 135 0098               	
 136 0098 08000043		j	eval_end
 137 009c               
 138 009c               no_last_fixed_space:
 139 009c               	
 140 009c 22040001		addi	$a0, $s0, 1				#tick board pointer
 141 00a0 22250001		addi	$a1, $s1, 1				#tick counter
 142 00a4 02403021		move	$a2, $s2				
 143 00a8 02603821		move	$a3, $s3
 144 00ac 00001021		move	$v0, $zero
 145 00b0               	
 146 00b0 0C000014		jal	eval					#recurse
 147 00b4               	
 148 00b4 08000043		j	eval_end
 149 00b8               
 150 00b8               eval_not_found_fixed:
 151 00b8               	
 152 00b8 34140001		li	$s4, 1					#s4 is our counter for the loop (cant use 0)
 153 00bc               	
 154 00bc               eval_loop:
 155 00bc               	
 156 00bc 22590001		addi	$t9, $s2, 1
 157 00c0 12990011		beq	$s4, $t9, eval_loop_done
 158 00c4               	
 159 00c4 A2140000		sb	$s4, 0($s0)				#write to board
 160 00c8 0C00004D		jal	validate_board				#validate
 161 00cc               	
 162 00cc 1040000B		beq	$v0, $zero, eval_loop_bottom		#branch if bad place
 163 00d0               	
 164 00d0 226BFFFF		addi	$t3, $s3, -1
 165 00d4 162B0001		bne	$s1, $t3, not_last_place
 166 00d8               	
 167 00d8               	#here it is the last place and v0 is 1 so return 1
 168 00d8 08000043		j	eval_end
 169 00dc               	
 170 00dc               	
 171 00dc               not_last_place:
 172 00dc 22040001		addi	$a0, $s0, 1				#tick board pointer
 173 00e0 22250001		addi	$a1, $s1, 1				#tick counter
 174 00e4 02403021		move	$a2, $s2				
 175 00e8 02603821		move	$a3, $s3
 176 00ec 00001021		move	$v0, $zero
 177 00f0               	
 178 00f0 0C000014		jal	eval					#recurse
 179 00f4               	
 180 00f4 10400001		beq	$v0, $zero, eval_loop_bottom
 181 00f8               	
 182 00f8 08000043		j	eval_end
 183 00fc               	
 184 00fc               eval_loop_bottom:
 185 00fc               	
 186 00fc A2000000		sb	$zero, 0($s0)				#rest board locaiton
 187 0100 22940001		addi	$s4, $s4, 1				#tick
 188 0104 0800002F		j	eval_loop
 189 0108               	
 190 0108               	
 191 0108               eval_loop_done:
 192 0108 08000043		j	eval_end
 193 010c               	
 194 010c               eval_end:
 195 010c               	
 196 010c 8FBF001C		lw	$ra, 28($sp)
 197 0110 8FB60018		lw	$s6, 24($sp)
 198 0114 8FB50014		lw	$s5, 20($sp)
 199 0118 8FB40010		lw	$s4, 16($sp)
 200 011c 8FB3000C		lw	$s3, 12($sp)
 201 0120 8FB20008		lw	$s2, 8($sp)
 202 0124 8FB10004		lw	$s1, 4($sp)
 203 0128 8FB00000		lw	$s0, 0($sp)
 204 012c 23BD0020		addi	$sp, $sp, 32
 205 0130 03E00008		jr	$ra
 206 0134               
 207 0134               
 208 0134               
 209 0134               
 210 0134               
 211 0134               
 212 0134               
 213 0134               #####################################################
 214 0134               #                    validate                       #
 215 0134               #####################################################
 216 0134               
 217 0134               #
 218 0134               # Name: validate_board
 219 0134               #
 220 0134               #
 221 0134               validate_board:
 222 0134 23BDFFF8		addi	$sp, $sp, -8
 223 0138 AFBF0004		sw	$ra, 4($sp)
 224 013c AFB00000		sw	$s0, 0($sp)
 225 0140               	
 226 0140 3C080000		la	$t0, board_size
     0144 35080000
 227 0148 81100000		lb	$s0, 0($t0)
 228 014c               	
 229 014c               	
 230 014c 3C040000		la	$a0, north_hints
     0150 34840000
 231 0154 3C050000		la	$a1, get_next_north
     0158 34A50394
 232 015c 02003021		move	$a2, $s0
 233 0160               	
 234 0160 0C000073		jal	generic_check_board
 235 0164               	
 236 0164 10400015		beq	$v0, $zero, done_validate
 237 0168               	
 238 0168 3C040000		la	$a0, south_hints
     016c 34840000
 239 0170 3C050000		la	$a1, get_next_south
     0174 34A50400
 240 0178 02003021		move	$a2, $s0
 241 017c               	
 242 017c 0C000073		jal	generic_check_board
 243 0180               	
 244 0180 1040000E		beq	$v0, $zero, done_validate
 245 0184               	
 246 0184 3C040000		la	$a0, east_hints
     0188 34840000
 247 018c 3C050000		la	$a1, get_next_east
     0190 34A503D4
 248 0194 02003021		move	$a2, $s0
 249 0198               	
 250 0198 0C000073		jal	generic_check_board
 251 019c               	
 252 019c 10400007		beq	$v0, $zero, done_validate
 253 01a0               	
 254 01a0 3C040000		la	$a0, west_hints
     01a4 34840000
 255 01a8 3C050000		la	$a1, get_next_west
     01ac 34A503B0
 256 01b0 02003021		move	$a2, $s0
 257 01b4               	
 258 01b4 0C000073		jal	generic_check_board
 259 01b8               	
 260 01b8 10400000		beq	$v0, $zero, done_validate
 261 01bc               	
 262 01bc               	
 263 01bc               done_validate:
 264 01bc 8FBF0004		lw	$ra, 4($sp)
 265 01c0 8FB00000		lw	$s0, 0($sp)
 266 01c4 23BD0008		addi	$sp, $sp, 8
 267 01c8 03E00008		jr	$ra
 268 01cc               
 269 01cc               
 270 01cc               #
 271 01cc               # Name: generic_check_board
 272 01cc               #
 273 01cc               # Arguments:
 274 01cc               #    a0: hint_pointer
 275 01cc               #    a1: index_funct_pointer
 276 01cc               #    a2: board_size
 277 01cc               #
 278 01cc               generic_check_board:
 279 01cc 23BDFFDC		addi	$sp, $sp, -36
 280 01d0 AFBF0020		sw	$ra, 32($sp)
 281 01d4 AFB7001C		sw	$s7, 28($sp)
 282 01d8 AFB60018		sw	$s6, 24($sp)
 283 01dc AFB50014		sw	$s5, 20($sp)
 284 01e0 AFB40010		sw	$s4, 16($sp)
 285 01e4 AFB3000C		sw	$s3, 12($sp)
 286 01e8 AFB20008		sw	$s2, 8($sp)
 287 01ec AFB10004		sw	$s1, 4($sp)
 288 01f0 AFB00000		sw	$s0, 0($sp)
 289 01f4               	
 290 01f4               	
 291 01f4 00808021		move	$s0, $a0		#hint pointer
 292 01f8 00A08821		move	$s1, $a1		#index funct pointer
 293 01fc 00C09021		move	$s2, $a2		#board size
 294 0200               	
 295 0200 34130000		li	$s3, 0			#col counter
 296 0204 34160001		li	$s6, 1			#defualt to pass
 297 0208               		
 298 0208               	
 299 0208               generic_check_loop_col:
 300 0208               
 301 0208 1253002C		beq	$s2, $s3, generic_check_loop_done_col
 302 020c               	
 303 020c               	
 304 020c 34140000		li	$s4, 0			#row counter
 305 0210 34150000		li	$s5, 0			#height counter
 306 0214 340D0000		li	$t5, 0			#last building
 307 0218               	
 308 0218               	#check result
 309 0218               	
 310 0218 82170000		lb	$s7, 0($s0)		#current hint
 311 021c               	
 312 021c               generic_check_loop_row:
 313 021c               
 314 021c               	
 315 021c 12E00020		beq	$s7, $zero, generic_check_loop_done_row		#no hint, pass
 316 0220               
 317 0220 1254001F		beq	$s2, $s4, generic_check_loop_done_row		#normal loop end
 318 0224               	
 319 0224 2284FFFF		addi	$a0, $s4, -1		#backup one
 320 0228 02602821		move	$a1, $s3
 321 022c 02403021		move	$a2, $s2		#alwas load boar size even though north and west dont need
 322 0230               	
 323 0230               	
 324 0230               	
 325 0230 23BDFFFC		addi	$sp, $sp, -4		#have to save restore $t5
 326 0234 AFAD0000		sw	$t5, 0($sp)
 327 0238               	
 328 0238 0220F809		jalr	$s1			#call indexer funct
 329 023c               	
 330 023c 8FAD0000		lw	$t5, 0($sp)
 331 0240 23BD0004		addi	$sp, $sp, 4
 332 0244               	
 333 0244 00405021		move	$t2, $v0		#set cur
 334 0248               	
 335 0248               	
 336 0248               	
 337 0248 02602021		move	$a0, $s3		#load col number
 338 024c 02202821		move	$a1, $s1		#funct pointer
 339 0250 01403021		move	$a2, $t2		#val
 340 0254 02403821		move	$a3, $s2		#board size
 341 0258               	
 342 0258 23BDFFF8		addi	$sp, $sp, -8		#have to save restore stuff
 343 025c AFAA0004		sw	$t2, 4($sp)
 344 0260 AFAD0000		sw	$t5, 0($sp)
 345 0264               	
 346 0264 0C0000BB		jal	repeat_check
 347 0268               	
 348 0268 8FAD0000		lw	$t5, 0($sp)
 349 026c 8FAA0004		lw	$t2, 4($sp)
 350 0270 23BD0008		addi	$sp, $sp, 8
 351 0274               	
 352 0274 1440000F		bne	$v0, $zero, check_fail
 353 0278               	
 354 0278               	
 355 0278               	
 356 0278 1140000B		beq	$t2, $zero, generic_check_loop_found_zero	#found zero, not finished, valid
 357 027c               	
 358 027c 21AE0001		addi	$t6, $t5, 1
 359 0280 014E082A		blt	$t2, $t6, pass_add
     0284 14200003
 360 0288               	
 361 0288 22B50001		addi	$s5, $s5, 1					#add to new if its last
 362 028c 01406821		move	$t5, $t2					#set as new greatest
 363 0290 01A02021		move	$a0, $t5
 364 0294               	
 365 0294               pass_add:
 366 0294               
 367 0294 080000A6		j	continue_check_loop
 368 0298               	
 369 0298               continue_check_loop:
 370 0298               	
 371 0298 22940001		addi	$s4, $s4, 1
 372 029c 08000087		j	generic_check_loop_row
 373 02a0               
 374 02a0               generic_check_loop_done_row:
 375 02a0               	
 376 02a0               	#move	$a0, $s5
 377 02a0               	#jal	print_number
 378 02a0               	#move	$a0, $s7
 379 02a0               	#jal	print_number
 380 02a0               	#la	$a0, new_line_char
 381 02a0               	#jal	print_string
 382 02a0               	
 383 02a0 02B7082A		blt	$s5, $s7, check_fail	#fail
     02a4 14200003
 384 02a8               	
 385 02a8               generic_check_loop_found_zero:
 386 02a8               	
 387 02a8 22100001		addi	$s0, $s0, 1
 388 02ac               	#la	$a0, new_line_char
 389 02ac               	#jal	print_string
 390 02ac               	
 391 02ac 22730001		addi	$s3, $s3, 1
 392 02b0 08000082		j	generic_check_loop_col
 393 02b4               	
 394 02b4               	############### fail #################
 395 02b4               check_fail:
 396 02b4 34160000		li	$s6, 0				#reutrn 0
 397 02b8 080000AF		j	generic_check_loop_done_col	#break all loops	
 398 02bc               
 399 02bc               generic_check_loop_done_col:
 400 02bc               
 401 02bc 02C01021		move	$v0, $s6	#reutrn result
 402 02c0               	
 403 02c0 8FBF0020		lw	$ra, 32($sp)
 404 02c4 8FB7001C		lw	$s7, 28($sp)
 405 02c8 8FB60018		lw	$s6, 24($sp)
 406 02cc 8FB50014		lw	$s5, 20($sp)
 407 02d0 8FB40010		lw	$s4, 16($sp)
 408 02d4 8FB3000C		lw	$s3, 12($sp)
 409 02d8 8FB20008		lw	$s2, 8($sp)
 410 02dc 8FB10004		lw	$s1, 4($sp)
 411 02e0 8FB00000		lw	$s0, 0($sp)
 412 02e4 23BD0024		addi	$sp, $sp, 36
 413 02e8 03E00008		jr	$ra
 414 02ec               	
 415 02ec               	
 416 02ec               #
 417 02ec               # Name: repeat check
 418 02ec               #
 419 02ec               # Arguments:
 420 02ec               #    a0: col number
 421 02ec               #    a1: get_next_pointer
 422 02ec               #    a2: val
 423 02ec               #    a3: board_size
 424 02ec               #	
 425 02ec               repeat_check:
 426 02ec 23BDFFDC		addi	$sp, $sp, -36
 427 02f0 AFBF0020		sw	$ra, 32($sp)
 428 02f4 AFB7001C		sw	$s7, 28($sp)
 429 02f8 AFB60018		sw	$s6, 24($sp)
 430 02fc AFB50014		sw	$s5, 20($sp)
 431 0300 AFB40010		sw	$s4, 16($sp)
 432 0304 AFB3000C		sw	$s3, 12($sp)
 433 0308 AFB20008		sw	$s2, 8($sp)
 434 030c AFB10004		sw	$s1, 4($sp)
 435 0310 AFB00000		sw	$s0, 0($sp)
 436 0314               
 437 0314 00808021		move	$s0, $a0	#col
 438 0318 00A08821		move	$s1, $a1	#funct
 439 031c 00C09021		move	$s2, $a2	#val
 440 0320 00E09821		move	$s3, $a3	#board_size
 441 0324               	
 442 0324 34140000		li	$s4, 0		#counter
 443 0328 34150000		li	$s5, 0		#false by default
 444 032c 34160000		li	$s6, 0		#rpt counter
 445 0330               	
 446 0330               repeat_check_loop:
 447 0330               	
 448 0330 1293000C		beq	$s4, $s3, repeat_check_loop_done
 449 0334               	
 450 0334 2284FFFF		addi	$a0, $s4, -1		#backup one to get next
 451 0338 02002821		move	$a1, $s0		#col
 452 033c 02603021		move	$a2, $s3		#alwas load boar size even though north and west dont need
 453 0340               	
 454 0340 0220F809		jalr	$s1			#call indexer funct
 455 0344               	
 456 0344 10400007		beq	$v0, $zero, repeat_check_loop_done
 457 0348 14520003		bne	$v0, $s2, repeat_check_loop_bottom
 458 034c               	
 459 034c               	#match_found
 460 034c               
 461 034c 22D60001		addi	$s6, $s6, 1
 462 0350               	
 463 0350 340A0002		li	$t2, 2
 464 0354 12CA0002		beq	$s6, $t2, repeat_found
 465 0358               	
 466 0358               	
 467 0358               repeat_check_loop_bottom:
 468 0358 22940001		addi	$s4, $s4, 1
 469 035c 080000CC		j	repeat_check_loop
 470 0360               	
 471 0360               repeat_found:
 472 0360               	
 473 0360 34150001		li	$s5, 1
 474 0364               
 475 0364               repeat_check_loop_done:
 476 0364               	
 477 0364               	
 478 0364 02A01021		move	$v0, $s5
 479 0368               	
 480 0368 8FBF0020		lw	$ra, 32($sp)
 481 036c 8FB7001C		lw	$s7, 28($sp)
 482 0370 8FB60018		lw	$s6, 24($sp)
 483 0374 8FB50014		lw	$s5, 20($sp)
 484 0378 8FB40010		lw	$s4, 16($sp)
 485 037c 8FB3000C		lw	$s3, 12($sp)
 486 0380 8FB20008		lw	$s2, 8($sp)
 487 0384 8FB10004		lw	$s1, 4($sp)
 488 0388 8FB00000		lw	$s0, 0($sp)
 489 038c 23BD0024		addi	$sp, $sp, 36
 490 0390 03E00008		jr	$ra
 491 0394               
 492 0394               	
 493 0394               
 494 0394               #
 495 0394               # Name: get_next_north
 496 0394               #
 497 0394               # Arguments:
 498 0394               #    a0: col index
 499 0394               #    a1: current_row_index
 500 0394               #
 501 0394               get_next_north:
 502 0394 23BDFFFC		addi	$sp, $sp, -4
 503 0398 AFBF0000		sw	$ra, 0($sp)
 504 039c               	
 505 039c 20840001		addi	$a0, $a0, 1
 506 03a0               	
 507 03a0 0C000109		jal	read_board
 508 03a4               	
 509 03a4 8FBF0000		lw	$ra, 0($sp)
 510 03a8 23BD0004		addi	$sp, $sp, 4
 511 03ac 03E00008		jr	$ra
 512 03b0               
 513 03b0               #
 514 03b0               # Name: get_next_west
 515 03b0               #
 516 03b0               # Arguments:
 517 03b0               #    a0: row index
 518 03b0               #    a1: current_col_index
 519 03b0               #
 520 03b0               get_next_west:
 521 03b0 23BDFFFC		addi	$sp, $sp, -4
 522 03b4 AFBF0000		sw	$ra, 0($sp)
 523 03b8               	
 524 03b8 00A04021		move	$t0, $a1
 525 03bc 20850001		addi	$a1, $a0, 1
 526 03c0 01002021		move	$a0, $t0
 527 03c4               	
 528 03c4 0C000109		jal	read_board
 529 03c8               	
 530 03c8 8FBF0000		lw	$ra, 0($sp)
 531 03cc 23BD0004		addi	$sp, $sp, 4
 532 03d0 03E00008		jr	$ra
 533 03d4               
 534 03d4               #
 535 03d4               # Name: get_next_east
 536 03d4               #
 537 03d4               # Arguments:
 538 03d4               #    a0: row index
 539 03d4               #    a1: current_col_index
 540 03d4               #    a2: board size
 541 03d4               #
 542 03d4               get_next_east:
 543 03d4 23BDFFFC		addi	$sp, $sp, -4
 544 03d8 AFBF0000		sw	$ra, 0($sp)
 545 03dc               	
 546 03dc 00A04021		move	$t0, $a1
 547 03e0 20850001		addi	$a1, $a0, 1
 548 03e4 00C52822		sub	$a1, $a2, $a1
 549 03e8 20A5FFFF		addi	$a1, $a1, -1
 550 03ec 01002021		move	$a0, $t0
 551 03f0               	
 552 03f0 0C000109		jal	read_board
 553 03f4               	
 554 03f4 8FBF0000		lw	$ra, 0($sp)
 555 03f8 23BD0004		addi	$sp, $sp, 4
 556 03fc 03E00008		jr	$ra
 557 0400               	
 558 0400               #
 559 0400               # Name: get_next_south
 560 0400               #
 561 0400               # Arguments:
 562 0400               #    a0: col index
 563 0400               #    a1: current_row_index
 564 0400               #    a2: board size
 565 0400               #
 566 0400               get_next_south:
 567 0400 23BDFFFC		addi	$sp, $sp, -4
 568 0404 AFBF0000		sw	$ra, 0($sp)
 569 0408               	
 570 0408               	
 571 0408 20840001		addi	$a0, $a0, 1
 572 040c               	
 573 040c 00C42022		sub	$a0, $a2, $a0		#reverse index
 574 0410 2084FFFF		addi	$a0, $a0, -1
 575 0414               	
 576 0414 0C000109		jal	read_board
 577 0418               	
 578 0418 8FBF0000		lw	$ra, 0($sp)
 579 041c 23BD0004		addi	$sp, $sp, 4
 580 0420 03E00008		jr	$ra
 581 0424               
 582 0424               
 583 0424               
 584 0424               
 585 0424               #####################################################
 586 0424               #               Data Acces Functions                #
 587 0424               #####################################################
 588 0424               
 589 0424               #
 590 0424               # Name: read_board
 591 0424               #
 592 0424               # Arguments:
 593 0424               #    a0: x index
 594 0424               #    a1: y index
 595 0424               #
 596 0424               read_board:
 597 0424 3C080000		la	$t0, board_size
     0428 35080000
 598 042c 81080000		lb	$t0, 0($t0)
 599 0430               	#t0 has board width
 600 0430               	
 601 0430 01040018		mul	$t0, $t0, $a0
     0434 00004012
 602 0438 01054020		add	$t0, $t0, $a1
 603 043c               	
 604 043c 3C090000		la	$t1, board
     0440 35290000
 605 0444 01284020		add	$t0, $t1, $t0
 606 0448 81020000		lb	$v0, 0($t0)
 607 044c               	
 608 044c 03E00008		jr	$ra
 609 0450               	
 610 0450               #
 611 0450               # Name: write_board
 612 0450               #
 613 0450               # Arguments:
 614 0450               #    a0: x index
 615 0450               #    a1: y index
 616 0450               #    a2: value
 617 0450               #
 618 0450               write_board:
 619 0450 3C080000		la	$t0, board_size
     0454 35080000
 620 0458 81080000		lb	$t0, 0($t0)
 621 045c               	#t0 has board width
 622 045c               	
 623 045c 01040018		mul	$t0, $t0, $a0
     0460 00004012
 624 0464 01054020		add	$t0, $t0, $a1
 625 0468               	
 626 0468 3C090000		la	$t1, board
     046c 35290000
 627 0470 01284020		add	$t0, $t1, $t0
 628 0474 A1060000		sb	$a2, 0($t0)
 629 0478               	
 630 0478 03E00008		jr	$ra
 631 047c               	
 632 047c               
 633 047c               #####################################################
 634 047c               #               Data Input Functions                #
 635 047c               #####################################################
 636 047c               
 637 047c               #
 638 047c               # Name: read_input
 639 047c               #
 640 047c               read_input:
 641 047c 23BDFFF8		addi	$sp, $sp, -8
 642 0480 AFBF0004		sw	$ra, 4($sp)
 643 0484 AFB00000		sw	$s0, 0($sp)
 644 0488               
 645 0488               	#read user input board bounds
 646 0488 34020005		li	$v0, READ_INT
 647 048c 0000000C		syscall
 648 0490               	
 649 0490               	#confirm starting board bounds
 650 0490 34080003		li	$t0, 3
 651 0494 34090009		li	$t1, 9
 652 0498 3C040000		la	$a0, board_input_error
     049c 34840000
 653 04a0 0048082A		blt	$v0, $t0, read_input_error
     04a4 14200026
 654 04a8 0122082A		blt	$t1, $v0, read_input_error
     04ac 14200024
 655 04b0               	
 656 04b0               	#write the borad bounds
 657 04b0 3C080000		la	$t0, board_size
     04b4 35080000
 658 04b8 A1020000		sb	$v0, 0($t0)
 659 04bc               	
 660 04bc 00408021		move	$s0, $v0	#s0 will contian the board size
 661 04c0               	
 662 04c0 3C040000		la	$a0, north_hints
     04c4 34840000
 663 04c8 02002821		move	$a1, $s0
 664 04cc 0C000189		jal	load_hints
 665 04d0 1040001B		beq	$v0, $zero, read_input_error
 666 04d4               	
 667 04d4               	
 668 04d4 3C040000		la	$a0, east_hints
     04d8 34840000
 669 04dc 02002821		move	$a1, $s0
 670 04e0 0C000189		jal	load_hints
 671 04e4 10400016		beq	$v0, $zero, read_input_error
 672 04e8               
 673 04e8               
 674 04e8 3C040000		la	$a0, south_hints
     04ec 34840000
 675 04f0 02002821		move	$a1, $s0
 676 04f4 0C000189		jal	load_hints
 677 04f8 10400011		beq	$v0, $zero, read_input_error
 678 04fc               
 679 04fc               
 680 04fc 3C040000		la	$a0, west_hints
     0500 34840000
 681 0504 02002821		move	$a1, $s0
 682 0508 0C000189		jal	load_hints
 683 050c 1040000C		beq	$v0, $zero, read_input_error
 684 0510               	
 685 0510               	
 686 0510               	
 687 0510 34020005		li	$v0, READ_INT
 688 0514 0000000C		syscall
 689 0518               	
 690 0518 3C040000		la	$a0, fixed_input_error
     051c 34840000
 691 0520 0040082A		blt	$v0, $zero, read_input_error
     0524 14200006
 692 0528               	
 693 0528 00402021		move	$a0, $v0
 694 052c 02002821		move	$a1, $s0
 695 0530 0C000156		jal	load_fixed
 696 0534 10400002		beq	$v0, $zero, read_input_error
 697 0538               	
 698 0538               
 699 0538               
 700 0538               	#all input is good
 701 0538 34020001		li	$v0, 1		#return 1
 702 053c 08000152		j	read_input_end
 703 0540               
 704 0540               	
 705 0540               read_input_error:
 706 0540               	
 707 0540 0C00021A		jal	print_string
 708 0544 34020000		li	$v0, 0		#return 0
 709 0548               
 710 0548               read_input_end:
 711 0548 8FBF0004		lw	$ra, 4($sp)
 712 054c 8FB00000		lw	$s0, 0($sp)
 713 0550 23BD0008		addi	$sp, $sp, 8
 714 0554 03E00008		jr	$ra
 715 0558               
 716 0558               
 717 0558               
 718 0558               
 719 0558               
 720 0558               
 721 0558               
 722 0558               #
 723 0558               # Name: load_fixed
 724 0558               #
 725 0558               # Arguments: 
 726 0558               #    $a0: num of fixed towers
 727 0558               #    $a1: board Size
 728 0558               #
 729 0558               load_fixed:
 730 0558 23BDFFEC		addi	$sp, $sp, -20
 731 055c AFBF0010		sw	$ra, 16($sp)
 732 0560 AFB3000C		sw	$s3, 12($sp)
 733 0564 AFB20008		sw	$s2, 8($sp)
 734 0568 AFB10004		sw	$s1, 4($sp)
 735 056c AFB00000		sw	$s0, 0($sp)
 736 0570               	
 737 0570 00808021		move	$s0, $a0	#s0 contains number of fixed towers
 738 0574 34110000		li	$s1, 0		#conter
 739 0578 00A09021		move	$s2, $a1
 740 057c               	
 741 057c 34130001		li	$s3, 1
 742 0580               	
 743 0580               read_fixed_loop:
 744 0580               
 745 0580 12300020		beq	$s1, $s0, load_fixed_done
 746 0584               	
 747 0584               	#load x
 748 0584 34020005		li	$v0, READ_INT
 749 0588 0000000C		syscall
 750 058c 00404021		move	$t0, $v0
 751 0590               	
 752 0590 0100082A		blt	$t0, $zero, size_fixed_error
     0594 14200017
 753 0598 0248082A		blt	$s2, $t0, size_fixed_error
     059c 14200015
 754 05a0               	
 755 05a0               	#load y
 756 05a0 34020005		li	$v0, READ_INT
 757 05a4 0000000C		syscall
 758 05a8 00404821		move	$t1, $v0
 759 05ac               	
 760 05ac 0120082A		blt	$t1, $zero, size_fixed_error
     05b0 14200010
 761 05b4 0249082A		blt	$s2, $t1, size_fixed_error
     05b8 1420000E
 762 05bc               	
 763 05bc               	#load value
 764 05bc 34020005		li	$v0, READ_INT
 765 05c0 0000000C		syscall
 766 05c4 00405021		move	$t2, $v0
 767 05c8               	
 768 05c8 34190001		li	$t9, 1
 769 05cc 0159082A		blt	$t2, $t9, size_fixed_error
     05d0 14200008
 770 05d4 024A082A		blt	$s2, $t2, size_fixed_error
     05d8 14200006
 771 05dc               	
 772 05dc 01002021		move	$a0, $t0
 773 05e0 01202821		move	$a1, $t1
 774 05e4 01403021		move	$a2, $t2
 775 05e8 0C000114		jal	write_board
 776 05ec               	
 777 05ec               	
 778 05ec 22310001		addi	$s1, $s1, 1
 779 05f0 08000160		j	read_fixed_loop	
 780 05f4               
 781 05f4               size_fixed_error:
 782 05f4               	
 783 05f4 3C040000		la	$a0, fixed_input_error
     05f8 34840000
 784 05fc 34130000		li	$s3, 0
 785 0600 08000181		j	load_fixed_done
 786 0604               	
 787 0604               load_fixed_done:
 788 0604 02601021		move	$v0, $s3
 789 0608 8FBF0010		lw	$ra, 16($sp)
 790 060c 8FB3000C		lw	$s3, 12($sp)
 791 0610 8FB20008		lw	$s2, 8($sp)
 792 0614 8FB10004		lw	$s1, 4($sp)
 793 0618 8FB00000		lw	$s0, 0($sp)
 794 061c 23BD0014		addi	$sp, $sp, 20
 795 0620 03E00008		jr	$ra
 796 0624               
 797 0624               
 798 0624               
 799 0624               
 800 0624               
 801 0624               
 802 0624               	
 803 0624               
 804 0624               #
 805 0624               # Name: load_hints
 806 0624               #
 807 0624               # Arguments: 
 808 0624               #    $a0: hint array pointer
 809 0624               #    $a1: board size
 810 0624               #
 811 0624               load_hints:
 812 0624 23BDFFF0		addi	$sp, $sp, -16
 813 0628 AFBF000C		sw	$ra, 12($sp)
 814 062c AFB20008		sw	$s2, 8($sp)
 815 0630 AFB10004		sw	$s1, 4($sp)
 816 0634 AFB00000		sw	$s0, 0($sp)
 817 0638               	
 818 0638 00808021		move	$s0, $a0
 819 063c 00A08821		move	$s1, $a1
 820 0640               	
 821 0640 34080000		li	$t0, 0		#counter
 822 0644 34130001		li	$s3, 1
 823 0648               read_input_loop:
 824 0648               	
 825 0648 1111000E		beq	$t0, $s1, load_hints_done
 826 064c               	
 827 064c 34020005		li	$v0, READ_INT
 828 0650 0000000C		syscall
 829 0654               	
 830 0654 0040082A		blt	$v0, $zero, size_input_error
     0658 14200006
 831 065c 0222082A		blt	$s1, $v0, size_input_error
     0660 14200004
 832 0664               	
 833 0664               	
 834 0664 A2020000		sb	$v0, 0($s0)
 835 0668 22100001		addi	$s0, $s0, 1
 836 066c               
 837 066c 21080001		addi	$t0, $t0, 1
 838 0670 08000192		j	read_input_loop
 839 0674               
 840 0674               	
 841 0674               size_input_error:
 842 0674               	
 843 0674 3C040000		la	$a0, illegal_input_error
     0678 34840000
 844 067c 34130000		li	$s3, 0
 845 0680 080001A1		j	load_hints_done
 846 0684               	
 847 0684               load_hints_done:
 848 0684 02601021		move	$v0, $s3
 849 0688 8FBF000C		lw	$ra, 12($sp)
 850 068c 8FB10008		lw	$s1, 8($sp)
 851 0690 8FB10004		lw	$s1, 4($sp)
 852 0694 8FB00000		lw	$s0, 0($sp)
 853 0698 23BD0010		addi	$sp, $sp, 16
 854 069c 03E00008		jr	$ra
 855 06a0               	
 856 06a0               	
 857 06a0               	
 858 06a0               	
 859 06a0               
 860 06a0               #####################################################
 861 06a0               #               Print functions                     #
 862 06a0               #####################################################
 863 06a0               
 864 06a0               #
 865 06a0               # Name: print board
 866 06a0               #
 867 06a0               print_board:
 868 06a0               	
 869 06a0 23BDFFEC		addi	$sp, $sp, -20
 870 06a4 AFBF0010		sw	$ra, 16($sp)
 871 06a8 AFB3000C		sw	$s3, 12($sp)
 872 06ac AFB20008		sw	$s2, 8($sp)
 873 06b0 AFB10004		sw	$s1, 4($sp)
 874 06b4 AFB00000		sw	$s0, 0($sp)
 875 06b8               	
 876 06b8 3C100000		la	$s0, board_size
     06bc 36100000
 877 06c0 82100000		lb	$s0, 0($s0)
 878 06c4 3C110000		la	$s1, board		#s1 contains board pointer
     06c8 36310000
 879 06cc 34120000		li	$s2, 0
 880 06d0               
 881 06d0 3C040000		la	$a0, north_hints
     06d4 34840000
 882 06d8 0C000201		jal	print_x_hints
 883 06dc               
 884 06dc               print_board_loop_row:
 885 06dc               
 886 06dc 1250001B		beq	$s2, $s0, print_board_done
 887 06e0               
 888 06e0 0C0001E1		jal	print_break_row		#print break
 889 06e4               
 890 06e4 3C040000		la	$a0, west_hints
     06e8 34840000
 891 06ec 02402821		move	$a1, $s2
 892 06f0 0C0001F9		jal	print_y_hint		#print y hint
 893 06f4               	
 894 06f4 3C040000		la	$a0, spaces
     06f8 34840000
 895 06fc 0C00021A		jal	print_string
 896 0700               
 897 0700 3C040000		la	$a0, board_space_front
     0704 34840000
 898 0708 0C00021A		jal	print_string
 899 070c               	
 900 070c               
 901 070c 00009821		move	$s3, $zero
 902 0710               
 903 0710               
 904 0710               print_board_loop_col:
 905 0710               
 906 0710 12700008		beq	$s3, $s0, print_board_loop_col_done
 907 0714               
 908 0714 82240000		lb	$a0, 0($s1)
 909 0718 0C00021D		jal	print_number_exclude
 910 071c               
 911 071c 3C040000		la	$a0, board_space_mid
     0720 34840000
 912 0724 0C00021A		jal	print_string
 913 0728               	
 914 0728 22730001		addi	$s3, $s3, 1
 915 072c 22310001		addi	$s1, $s1, 1
 916 0730 080001C4		j	print_board_loop_col
 917 0734               	
 918 0734               print_board_loop_col_done:
 919 0734               	
 920 0734 3C040000		la	$a0, east_hints
     0738 34840000
 921 073c 02402821		move	$a1, $s2
 922 0740 0C0001F9		jal	print_y_hint
 923 0744               	
 924 0744               	#addi	$s1, $s1, 1
 925 0744 22520001		addi	$s2, $s2, 1
 926 0748               	
 927 0748 080001B7		j	print_board_loop_row
 928 074c               
 929 074c               print_board_done:
 930 074c               
 931 074c 0C0001E1		jal	print_break_row
 932 0750               
 933 0750 3C040000		la	$a0, south_hints
     0754 34840000
 934 0758 0C000201		jal	print_x_hints
 935 075c               	
 936 075c 3C040000		la	$a0, new_line_char
     0760 34840000
 937 0764 0C00021A		jal	print_string
 938 0768               
 939 0768 8FBF0010		lw	$ra, 16($sp)
 940 076c 8FB3000C		lw	$s3, 12($sp)
 941 0770 8FB20008		lw	$s2, 8($sp)
 942 0774 8FB10004		lw	$s1, 4($sp)
 943 0778 8FB00000		lw	$s0, 0($sp)
 944 077c 23BD0014		addi	$sp, $sp, 20
 945 0780 03E00008		jr	$ra
 946 0784               
 947 0784               
 948 0784               #
 949 0784               # Name: Print break row
 950 0784               #
 951 0784               print_break_row:
 952 0784               	
 953 0784 23BDFFFC		addi	$sp, $sp, -4
 954 0788 AFBF0000		sw	$ra, 0($sp)
 955 078c               
 956 078c 3C040000		la	$a0, new_line_char
     0790 34840000
 957 0794 0C00021A		jal	print_string
 958 0798               
 959 0798 3C040000		la	$a0, spacess
     079c 34840000
 960 07a0 0C00021A		jal	print_string
 961 07a4               	
 962 07a4 3C090000		la      $t1, board_size
     07a8 35290000
 963 07ac 81290000		lb      $t1, 0($t1)
 964 07b0               
 965 07b0 34080000		li	$t0, 0
 966 07b4               
 967 07b4               
 968 07b4               print_break_row_loop:
 969 07b4               	
 970 07b4 11280005		beq	$t1, $t0, print_break_row_done
 971 07b8               
 972 07b8 3C040000		la	$a0, board_row_break_part
     07bc 34840000
 973 07c0 0C00021A		jal	print_string
 974 07c4               
 975 07c4 21080001		addi	$t0, $t0, 1
 976 07c8               
 977 07c8 080001ED		j	print_break_row_loop
 978 07cc               
 979 07cc               print_break_row_done:
 980 07cc 3C040000		la	$a0, plus_char_break
     07d0 34840000
 981 07d4 0C00021A		jal	print_string
 982 07d8               	
 983 07d8 8FBF0000		lw	$ra, 0($sp)
 984 07dc 23BD0004		addi	$sp, $sp, 4
 985 07e0               	
 986 07e0 03E00008		jr	$ra
 987 07e4               
 988 07e4               
 989 07e4               #
 990 07e4               # Name: print y hint
 991 07e4               #
 992 07e4               # Arguments:
 993 07e4               #    $a0: pointer to array
 994 07e4               #    $a1: index
 995 07e4               #
 996 07e4               print_y_hint:
 997 07e4 23BDFFFC		addi	$sp, $sp, -4
 998 07e8 AFBF0000		sw	$ra, 0($sp)
 999 07ec               
1000 07ec 00852020		add	$a0, $a0, $a1
1001 07f0 80840000		lb	$a0, 0($a0)
1002 07f4 0C00021D		jal	print_number_exclude
1003 07f8               
1004 07f8 8FBF0000		lw	$ra, 0($sp)
1005 07fc 23BD0004		addi	$sp, $sp, 4
1006 0800 03E00008		jr	$ra
1007 0804               
1008 0804               
1009 0804               
1010 0804               #
1011 0804               # Name: prints x axis hints
1012 0804               #
1013 0804               # Arguments: 
1014 0804               #     $a0: pointer to hint array
1015 0804               #
1016 0804               print_x_hints:
1017 0804 23BDFFFC		addi	$sp, $sp, -4
1018 0808 AFBF0000		sw	$ra, 0($sp)
1019 080c               	
1020 080c 00805021		move	$t2, $a0
1021 0810               
1022 0810 3C090000		la      $t1, board_size
     0814 35290000
1023 0818 81290000		lb      $t1, 0($t1)
1024 081c               
1025 081c 34080000		li	$t0, 0
1026 0820               	
1027 0820 3C040000		la	$a0, spacess
     0824 34840000
1028 0828 0C00021A		jal	print_string
1029 082c               
1030 082c               print_x_hints_loop: 
1031 082c               	
1032 082c 1128000B		beq	$t1, $t0, print_x_hints_done
1033 0830               	
1034 0830 3C040000		la	$a0, spacess
     0834 34840000
1035 0838 0C00021A		jal	print_string
1036 083c               
1037 083c 81440000		lb	$a0, 0($t2)
1038 0840               	
1039 0840 0C00021D		jal	print_number_exclude
1040 0844               
1041 0844 3C040000		la	$a0, spaces
     0848 34840000
1042 084c 0C00021A		jal	print_string
1043 0850               	
1044 0850 214A0001		addi	$t2, $t2, 1
1045 0854 21080001		addi	$t0, $t0, 1
1046 0858               
1047 0858 0800020B		j	print_x_hints_loop
1048 085c               
1049 085c               print_x_hints_done:
1050 085c               	
1051 085c 8FBF0000		lw	$ra, 0($sp)
1052 0860 23BD0004		addi	$sp, $sp, 4
1053 0864               	
1054 0864 03E00008		jr	$ra
1055 0868               
1056 0868               
1057 0868               
1058 0868               print_string:
1059 0868 34020004		li	$v0, PRINT_STRING
1060 086c 0000000C		syscall
1061 0870               
1062 0870 03E00008		jr	$ra
1063 0874               
1064 0874               
1065 0874               
1066 0874               #
1067 0874               # Name: print_number_exclude
1068 0874               #    prints numbers excluding zero
1069 0874               #
1070 0874               #
1071 0874               print_number_exclude:
1072 0874 23BDFFFC		addi	$sp, $sp, -4
1073 0878 AFBF0000		sw	$ra, 0($sp)
1074 087c               	
1075 087c 10800003		beq	$a0, $zero, print_space
1076 0880               	
1077 0880 34020001		li	$v0, PRINT_INT
1078 0884 0000000C		syscall
1079 0888               	
1080 0888 08000226		j	done_print_number_exclude
1081 088c               	
1082 088c               print_space:
1083 088c 3C040000		la	$a0, spaces
     0890 34840000
1084 0894 0C00021A		jal	print_string
1085 0898               	
1086 0898               done_print_number_exclude:
1087 0898               
1088 0898 8FBF0000		lw	$ra, 0($sp)
1089 089c 23BD0004		addi	$sp, $sp, 4
1090 08a0 03E00008		jr	$ra
1091 08a4               
1092 08a4               #
1093 08a4               # Name: print_number
1094 08a4               #    prints numbers
1095 08a4               #
1096 08a4               #
1097 08a4               print_number:
1098 08a4 34020001		li	$v0, PRINT_INT
1099 08a8 0000000C		syscall
1100 08ac               
1101 08ac 03E00008		jr	$ra
1102 08b0               
1103 08b0               
1104 08b0               
1105 08b0               


EXIT                           = 0000000A   
PRINT_INT                      = 00000001   
PRINT_STRING                   = 00000004   
READ_INT                       = 00000005   
board                            00000001 R  data 
board_input_error                0000019B R  data 
board_row_break_part             00000181 R  data 
board_size                       00000000 R  data 
board_space_back                 00000190 R  data 
board_space_front                00000189 R  data 
board_space_mid                  0000018C R  data 
check_fail                       000002B4 R  text 
continue_check_loop              00000298 R  text 
done_print_number_exclude        00000898 R  text 
done_validate                    000001BC R  text 
east_hints                       00000141 R  data 
eval                             00000050 R  text 
eval_end                         0000010C R  text 
eval_loop                        000000BC R  text 
eval_loop_bottom                 000000FC R  text 
eval_loop_done                   00000108 R  text 
eval_not_found_fixed             000000B8 R  text 
fixed_input_error                00000230 R  data 
fixed_number_input_error         000001F7 R  data 
generic_check_board              000001CC R  text 
generic_check_loop_col           00000208 R  text 
generic_check_loop_done_col      000002BC R  text 
generic_check_loop_done_row      000002A0 R  text 
generic_check_loop_found_zero    000002A8 R  text 
generic_check_loop_row           0000021C R  text 
get_next_east                    000003D4 R  text 
get_next_north                   00000394 R  text 
get_next_south                   00000400 R  text 
get_next_west                    000003B0 R  text 
illegal_input_error              000001C9 R  data 
load_fixed                       00000558 R  text 
load_fixed_done                  00000604 R  text 
load_hints                       00000624 R  text 
load_hints_done                  00000684 R  text 
main                             00000000 R  text 
main_done                        00000040 R  text 
new_line_char                    00000194 R  data 
no_last_fixed_space              0000009C R  text 
north_hints                      00000101 R  data 
not_last_place                   000000DC R  text 
pass_add                         00000294 R  text 
plus_char_break                  00000186 R  data 
print_board                      000006A0 R  text 
print_board_done                 0000074C R  text 
print_board_loop_col             00000710 R  text 
print_board_loop_col_done        00000734 R  text 
print_board_loop_row             000006DC R  text 
print_break_row                  00000784 R  text 
print_break_row_done             000007CC R  text 
print_break_row_loop             000007B4 R  text 
print_number                     000008A4 R  text 
print_number_exclude             00000874 R  text 
print_space                      0000088C R  text 
print_string                     00000868 R  text 
print_x_hints                    00000804 R  text 
print_x_hints_done               0000085C R  text 
print_x_hints_loop               0000082C R  text 
print_y_hint                     000007E4 R  text 
read_board                       00000424 R  text 
read_fixed_loop                  00000580 R  text 
read_input                       0000047C R  text 
read_input_end                   00000548 R  text 
read_input_error                 00000540 R  text 
read_input_loop                  00000648 R  text 
repeat_check                     000002EC R  text 
repeat_check_loop                00000330 R  text 
repeat_check_loop_bottom         00000358 R  text 
repeat_check_loop_done           00000364 R  text 
repeat_found                     00000360 R  text 
size_fixed_error                 000005F4 R  text 
size_input_error                 00000674 R  text 
south_hints                      00000121 R  data 
spaces                           00000199 R  data 
spacess                          00000196 R  data 
validate_board                   00000134 R  text 
west_hints                       00000161 R  data 
write_board                      00000450 R  text 
