   1 0000               
   2 0000               
   3 0000               
   4 0000               PRINT_INT = 1
   5 0000               PRINT_STRING = 4
   6 0000               READ_INT = 5
   7 0000               EXIT = 10
   8 0000               
   9 0000               	.data
  10 0000               	.align	0
  11 0000               
  12 0000               board_size:
  13 0000 00      		.byte	0
  14 0001               board:
  15 0001 00000000		.space	256
          00000000
          00000000
          00000000
          00000000
          00000000
  16 0101               north_hints:
  17 0101 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  18 0121               south_hints:
  19 0121 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  20 0141               east_hints:
  21 0141 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  22 0161               west_hints:
  23 0161 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  24 0181               
  25 0181               board_row_break_part:
  26 0181 2B2D2D2D		.asciiz "+---"
          00      
  27 0186               plus_char_break:
  28 0186 2B0A00  		.asciiz "+\n"
  29 0189               board_space_front:
  30 0189 7C2000  		.asciiz "| "
  31 018c               board_space_mid:
  32 018c 207C2000		.asciiz " | "
  33 0190               board_space_back:
  34 0190 207C0A00		.asciiz " |\n"
  35 0194               new_line_char:
  36 0194 0A00    		.asciiz "\n"
  37 0196               spacess:
  38 0196 202000  		.asciiz "  "
  39 0199               spaces:
  40 0199 2000    		.asciiz " "
  41 019b               	
  42 019b               board_input_error:
  43 019b 0A496E76		.asciiz "\nInvalid board size, Skyscrapers terminating\n"
          616C6964
          20626F61
          72642073
          697A652C
          20536B79
  44 01c9               illegal_input_error:
  45 01c9 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  46 01f7               fixed_number_input_error:
  47 01f7 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
  48 0230               fixed_input_error:
  49 0230 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
  50 0265               	
  51 0000               	.text
  52 0000               	.align	2
  53 0000               
  54 0000               #####################################################
  55 0000               #                  Program area                     #
  56 0000               #####################################################
  57 0000               
  58 0000               
  59 0000               #
  60 0000               # Name: Main
  61 0000               #
  62 0000               main:
  63 0000 23BDFFF8		addi	$sp, $sp, -8
  64 0004 AFBF0004		sw	$ra, 4($sp)
  65 0008 AFB00000		sw	$s0, 0($sp)
  66 000c               	
  67 000c 0C0000EA		jal	read_input
  68 0010 1040000B		beq	$v0, $zero, main_done	#end if it returned false.
  69 0014               	
  70 0014 0C000173		jal	print_board
  71 0018               	
  72 0018               	
  73 0018 3C040000		la	$a0, board
     001c 34840000
  74 0020 34050000		li	$a1, 0
  75 0024 3C080000		la	$t0, board_size
     0028 35080000
  76 002c 81060000		lb	$a2, 0($t0)
  77 0030 00C60018		mul	$a3, $a2, $a2
     0034 00003812
  78 0038               	
  79 0038 0C000014		jal	eval
  80 003c               	
  81 003c               	#la	$t0, board_size
  82 003c               	#lb	$a2, 0($t0)
  83 003c               	
  84 003c               	#li	$a0, -1
  85 003c               	#li	$a1, 0
  86 003c               	#jal	get_next_south
  87 003c               	#move	$a0, $v0
  88 003c               	#jal	print_number
  89 003c               	
  90 003c               	#debug
  91 003c 0C000173		jal	print_board
  92 0040               
  93 0040               main_done:
  94 0040 8FBF0004		lw	$ra, 4($sp)
  95 0044 8FB00000		lw	$s0, 0($sp)
  96 0048 23BD0008		addi	$sp, $sp, 8
  97 004c 03E00008		jr	$ra
  98 0050               
  99 0050               
 100 0050               
 101 0050               
 102 0050               #####################################################
 103 0050               #                    Sim eval                       #
 104 0050               #####################################################
 105 0050               
 106 0050               #
 107 0050               # Name: eval
 108 0050               #
 109 0050               # Arguments:
 110 0050               #    a0: board location pointer
 111 0050               #    a1: board locaiton counter
 112 0050               #    a2: board bound
 113 0050               #    a3: board length
 114 0050               #
 115 0050               eval:
 116 0050 23BDFFE0		addi	$sp, $sp, -32
 117 0054 AFBF001C		sw	$ra, 28($sp)
 118 0058 AFB60018		sw	$s6, 24($sp)
 119 005c AFB50014		sw	$s5, 20($sp)
 120 0060 AFB40010		sw	$s4, 16($sp)
 121 0064 AFB3000C		sw	$s3, 12($sp)
 122 0068 AFB20008		sw	$s2, 8($sp)
 123 006c AFB10004		sw	$s1, 4($sp)
 124 0070 AFB00000		sw	$s0, 0($sp)
 125 0074               	
 126 0074 00808021		move	$s0, $a0				#save board pointer
 127 0078 00A08821		move	$s1, $a1				#save locaiton counter
 128 007c 00C09021		move	$s2, $a2				#save board bound
 129 0080 00E09821		move	$s3, $a3				#save board length
 130 0084               	
 131 0084               	#debug
 132 0084               	#jal	print_board
 133 0084               	
 134 0084 82150000		lb	$s5, 0($s0)				#save current value
 135 0088               	
 136 0088 12A0000B		beq	$s5, $zero, eval_not_found_fixed	#if the current location is 0 branch
 137 008c               	
 138 008c               	#fixed found if here
 139 008c               	
 140 008c 226BFFFF		addi	$t3, $s3, -1
 141 0090 162B0002		bne	$s1, $t3, no_last_fixed_space		#if its the last fixed space, continue
 142 0094               	
 143 0094               	
 144 0094               	#here it is the last fixed space
 145 0094 0C00004D		jal	validate_board
 146 0098               	
 147 0098               	#if v0 is 0, bad. if not good
 148 0098               	
 149 0098 08000043		j	eval_end
 150 009c               
 151 009c               no_last_fixed_space:
 152 009c               	
 153 009c 22040001		addi	$a0, $s0, 1				#tick board pointer
 154 00a0 22250001		addi	$a1, $s1, 1				#tick counter
 155 00a4 02403021		move	$a2, $s2				
 156 00a8 02603821		move	$a3, $s3
 157 00ac 00001021		move	$v0, $zero
 158 00b0               	
 159 00b0 0C000014		jal	eval					#recurse
 160 00b4               	
 161 00b4 08000043		j	eval_end
 162 00b8               
 163 00b8               eval_not_found_fixed:
 164 00b8               	
 165 00b8 34140001		li	$s4, 1					#s4 is our counter for the loop (cant use 0)
 166 00bc               	
 167 00bc               eval_loop:
 168 00bc               	
 169 00bc 22590001		addi	$t9, $s2, 1
 170 00c0 12990011		beq	$s4, $t9, eval_loop_done
 171 00c4               	
 172 00c4 A2140000		sb	$s4, 0($s0)				#write to board
 173 00c8 0C00004D		jal	validate_board				#validate
 174 00cc               	
 175 00cc 1040000B		beq	$v0, $zero, eval_loop_bottom		#branch if bad place
 176 00d0               	
 177 00d0 226BFFFF		addi	$t3, $s3, -1
 178 00d4 162B0001		bne	$s1, $t3, not_last_place
 179 00d8               	
 180 00d8               	#here it is the last place and v0 is 1 so return 1
 181 00d8 08000043		j	eval_end
 182 00dc               	
 183 00dc               	
 184 00dc               not_last_place:
 185 00dc 22040001		addi	$a0, $s0, 1				#tick board pointer
 186 00e0 22250001		addi	$a1, $s1, 1				#tick counter
 187 00e4 02403021		move	$a2, $s2				
 188 00e8 02603821		move	$a3, $s3
 189 00ec 00001021		move	$v0, $zero
 190 00f0               	
 191 00f0 0C000014		jal	eval					#recurse
 192 00f4               	
 193 00f4 10400001		beq	$v0, $zero, eval_loop_bottom
 194 00f8               	
 195 00f8 08000043		j	eval_end
 196 00fc               	
 197 00fc               eval_loop_bottom:
 198 00fc               	
 199 00fc A2000000		sb	$zero, 0($s0)				#rest board locaiton
 200 0100 22940001		addi	$s4, $s4, 1				#tick
 201 0104 0800002F		j	eval_loop
 202 0108               	
 203 0108               	
 204 0108               eval_loop_done:
 205 0108 08000043		j	eval_end
 206 010c               	
 207 010c               eval_end:
 208 010c               	
 209 010c 8FBF001C		lw	$ra, 28($sp)
 210 0110 8FB60018		lw	$s6, 24($sp)
 211 0114 8FB50014		lw	$s5, 20($sp)
 212 0118 8FB40010		lw	$s4, 16($sp)
 213 011c 8FB3000C		lw	$s3, 12($sp)
 214 0120 8FB20008		lw	$s2, 8($sp)
 215 0124 8FB10004		lw	$s1, 4($sp)
 216 0128 8FB00000		lw	$s0, 0($sp)
 217 012c 23BD0020		addi	$sp, $sp, 32
 218 0130 03E00008		jr	$ra
 219 0134               
 220 0134               
 221 0134               
 222 0134               
 223 0134               
 224 0134               
 225 0134               
 226 0134               #####################################################
 227 0134               #                    validate                       #
 228 0134               #####################################################
 229 0134               
 230 0134               #
 231 0134               # Name: validate_board
 232 0134               #
 233 0134               #
 234 0134               validate_board:
 235 0134 23BDFFF8		addi	$sp, $sp, -8
 236 0138 AFBF0004		sw	$ra, 4($sp)
 237 013c AFB00000		sw	$s0, 0($sp)
 238 0140               	
 239 0140 3C080000		la	$t0, board_size
     0144 35080000
 240 0148 81100000		lb	$s0, 0($t0)
 241 014c               	
 242 014c               	
 243 014c 3C040000		la	$a0, north_hints
     0150 34840000
 244 0154 3C050000		la	$a1, get_next_north
     0158 34A502C0
 245 015c 02003021		move	$a2, $s0
 246 0160               	
 247 0160 0C000073		jal	generic_check_board
 248 0164               	
 249 0164 10400015		beq	$v0, $zero, done_validate
 250 0168               	
 251 0168 3C040000		la	$a0, south_hints
     016c 34840000
 252 0170 3C050000		la	$a1, get_next_south
     0174 34A5032C
 253 0178 02003021		move	$a2, $s0
 254 017c               	
 255 017c 0C000073		jal	generic_check_board
 256 0180               	
 257 0180 1040000E		beq	$v0, $zero, done_validate
 258 0184               	
 259 0184 3C040000		la	$a0, east_hints
     0188 34840000
 260 018c 3C050000		la	$a1, get_next_east
     0190 34A50300
 261 0194 02003021		move	$a2, $s0
 262 0198               	
 263 0198 0C000073		jal	generic_check_board
 264 019c               	
 265 019c 10400007		beq	$v0, $zero, done_validate
 266 01a0               	
 267 01a0 3C040000		la	$a0, west_hints
     01a4 34840000
 268 01a8 3C050000		la	$a1, get_next_west
     01ac 34A502DC
 269 01b0 02003021		move	$a2, $s0
 270 01b4               	
 271 01b4 0C000073		jal	generic_check_board
 272 01b8               	
 273 01b8 10400000		beq	$v0, $zero, done_validate
 274 01bc               	
 275 01bc               	
 276 01bc               done_validate:
 277 01bc 8FBF0004		lw	$ra, 4($sp)
 278 01c0 8FB00000		lw	$s0, 0($sp)
 279 01c4 23BD0008		addi	$sp, $sp, 8
 280 01c8 03E00008		jr	$ra
 281 01cc               
 282 01cc               
 283 01cc               #
 284 01cc               # Name: generic_check_board
 285 01cc               #
 286 01cc               # Arguments:
 287 01cc               #    a0: hint_pointer
 288 01cc               #    a1: index_funct_pointer
 289 01cc               #    a2: board_size
 290 01cc               #
 291 01cc               generic_check_board:
 292 01cc 23BDFFDC		addi	$sp, $sp, -36
 293 01d0 AFBF0020		sw	$ra, 32($sp)
 294 01d4 AFB7001C		sw	$s7, 28($sp)
 295 01d8 AFB60018		sw	$s6, 24($sp)
 296 01dc AFB50014		sw	$s5, 20($sp)
 297 01e0 AFB40010		sw	$s4, 16($sp)
 298 01e4 AFB3000C		sw	$s3, 12($sp)
 299 01e8 AFB20008		sw	$s2, 8($sp)
 300 01ec AFB10004		sw	$s1, 4($sp)
 301 01f0 AFB00000		sw	$s0, 0($sp)
 302 01f4               	
 303 01f4               	
 304 01f4 00808021		move	$s0, $a0		#hint pointer
 305 01f8 00A08821		move	$s1, $a1		#index funct pointer
 306 01fc 00C09021		move	$s2, $a2		#board size
 307 0200               	
 308 0200 34130000		li	$s3, 0			#col counter
 309 0204 34160001		li	$s6, 1			#defualt to pass
 310 0208               		
 311 0208               	
 312 0208               generic_check_loop_col:
 313 0208               
 314 0208 12530020		beq	$s2, $s3, generic_check_loop_done_col
 315 020c               	
 316 020c               	
 317 020c 34140000		li	$s4, 0			#row counter
 318 0210 34150000		li	$s5, 0			#height counter
 319 0214 340D0000		li	$t5, 0			#last building
 320 0218               	
 321 0218 82170000		lb	$s7, 0($s0)		#current hint
 322 021c               	
 323 021c               generic_check_loop_row:
 324 021c               
 325 021c               	#if next is greater, add to counter. if counter is == to hint, good. 
 326 021c               	
 327 021c               	
 328 021c 12E00014		beq	$s7, $zero, generic_check_loop_done_row		#no hint, pass
 329 0220               
 330 0220 12540013		beq	$s2, $s4, generic_check_loop_done_row		#normal loop end
 331 0224               	
 332 0224               	################### Main logic ########################
 333 0224               	
 334 0224               	
 335 0224 2284FFFF		addi	$a0, $s4, -1		#backup one
 336 0228 02602821		move	$a1, $s3
 337 022c 02403021		move	$a2, $s2		#alwas load boar size even though north and west dont need
 338 0230               	
 339 0230 23BDFFFC		addi	$sp, $sp, -4		#have to save restore $t5
 340 0234 AFAD0000		sw	$t5, 0($sp)
 341 0238               	
 342 0238 0220F809		jalr	$s1			#call indexer funct
 343 023c               	
 344 023c 8FAD0000		lw	$t5, 0($sp)
 345 0240 23BD0004		addi	$sp, $sp, 4
 346 0244               	
 347 0244 00405021		move	$t2, $v0		#set cur
 348 0248               	
 349 0248               	
 350 0248 1140000B		beq	$t2, $zero, generic_check_loop_found_zero	#found zero, not finished, valid
 351 024c               	
 352 024c 21AE0001		addi	$t6, $t5, 1
 353 0250 014E082A		blt	$t2, $t6, pass_add
     0254 14200003
 354 0258               	
 355 0258 22B50001		addi	$s5, $s5, 1					#add to new if its last
 356 025c 01406821		move	$t5, $t2					#set as new greatest
 357 0260 01A02021		move	$a0, $t5
 358 0264               	
 359 0264               pass_add:
 360 0264               
 361 0264 0800009A		j	continue_check_loop
 362 0268               	
 363 0268               continue_check_loop:
 364 0268               	
 365 0268               	########################################################
 366 0268               	#move	$a0, $v0	#debu
 367 0268               	#jal	print_number	#devg
 368 0268               	
 369 0268               	
 370 0268 22940001		addi	$s4, $s4, 1
 371 026c 08000087		j	generic_check_loop_row
 372 0270               
 373 0270               generic_check_loop_done_row:
 374 0270               	
 375 0270               	#move	$a0, $s5
 376 0270               	#jal	print_number
 377 0270               	#move	$a0, $s7
 378 0270               	#jal	print_number
 379 0270               	#la	$a0, new_line_char
 380 0270               	#jal	print_string
 381 0270               	
 382 0270 02B7082A		blt	$s5, $s7, check_fail	#fail
     0274 14200003
 383 0278               	
 384 0278               generic_check_loop_found_zero:
 385 0278               	
 386 0278 22100001		addi	$s0, $s0, 1
 387 027c               	#la	$a0, new_line_char
 388 027c               	#jal	print_string
 389 027c               	
 390 027c 22730001		addi	$s3, $s3, 1
 391 0280 08000082		j	generic_check_loop_col
 392 0284               	
 393 0284               	############### fail #################
 394 0284               check_fail:
 395 0284 34160000		li	$s6, 0				#reutrn 0
 396 0288 080000A3		j	generic_check_loop_done_col	#break all loops	
 397 028c               
 398 028c               generic_check_loop_done_col:
 399 028c               
 400 028c 0C000173		jal	print_board
 401 0290               
 402 0290 02C01021		move	$v0, $s6	#reutrn result
 403 0294               	
 404 0294 8FBF0020		lw	$ra, 32($sp)
 405 0298 8FB7001C		lw	$s7, 28($sp)
 406 029c 8FB60018		lw	$s6, 24($sp)
 407 02a0 8FB50014		lw	$s5, 20($sp)
 408 02a4 8FB40010		lw	$s4, 16($sp)
 409 02a8 8FB3000C		lw	$s3, 12($sp)
 410 02ac 8FB20008		lw	$s2, 8($sp)
 411 02b0 8FB10004		lw	$s1, 4($sp)
 412 02b4 8FB00000		lw	$s0, 0($sp)
 413 02b8 23BD0024		addi	$sp, $sp, 36
 414 02bc 03E00008		jr	$ra
 415 02c0               	
 416 02c0               	
 417 02c0               
 418 02c0               #
 419 02c0               # Name: get_next_north
 420 02c0               #
 421 02c0               # Arguments:
 422 02c0               #    a0: col index
 423 02c0               #    a1: current_row_index
 424 02c0               #
 425 02c0               get_next_north:
 426 02c0 23BDFFFC		addi	$sp, $sp, -4
 427 02c4 AFBF0000		sw	$ra, 0($sp)
 428 02c8               	
 429 02c8 20840001		addi	$a0, $a0, 1
 430 02cc               	
 431 02cc 0C0000D4		jal	read_board
 432 02d0               	
 433 02d0 8FBF0000		lw	$ra, 0($sp)
 434 02d4 23BD0004		addi	$sp, $sp, 4
 435 02d8 03E00008		jr	$ra
 436 02dc               
 437 02dc               #
 438 02dc               # Name: get_next_west
 439 02dc               #
 440 02dc               # Arguments:
 441 02dc               #    a0: row index
 442 02dc               #    a1: current_col_index
 443 02dc               #
 444 02dc               get_next_west:
 445 02dc 23BDFFFC		addi	$sp, $sp, -4
 446 02e0 AFBF0000		sw	$ra, 0($sp)
 447 02e4               	
 448 02e4 00A04021		move	$t0, $a1
 449 02e8 20850001		addi	$a1, $a0, 1
 450 02ec 01002021		move	$a0, $t0
 451 02f0               	
 452 02f0 0C0000D4		jal	read_board
 453 02f4               	
 454 02f4 8FBF0000		lw	$ra, 0($sp)
 455 02f8 23BD0004		addi	$sp, $sp, 4
 456 02fc 03E00008		jr	$ra
 457 0300               
 458 0300               #
 459 0300               # Name: get_next_east
 460 0300               #
 461 0300               # Arguments:
 462 0300               #    a0: row index
 463 0300               #    a1: current_col_index
 464 0300               #    a2: board size
 465 0300               #
 466 0300               get_next_east:
 467 0300 23BDFFFC		addi	$sp, $sp, -4
 468 0304 AFBF0000		sw	$ra, 0($sp)
 469 0308               	
 470 0308 00A04021		move	$t0, $a1
 471 030c 20850001		addi	$a1, $a0, 1
 472 0310 00C52822		sub	$a1, $a2, $a1
 473 0314 20A5FFFF		addi	$a1, $a1, -1
 474 0318 01002021		move	$a0, $t0
 475 031c               	
 476 031c 0C0000D4		jal	read_board
 477 0320               	
 478 0320 8FBF0000		lw	$ra, 0($sp)
 479 0324 23BD0004		addi	$sp, $sp, 4
 480 0328 03E00008		jr	$ra
 481 032c               	
 482 032c               #
 483 032c               # Name: get_next_south
 484 032c               #
 485 032c               # Arguments:
 486 032c               #    a0: col index
 487 032c               #    a1: current_row_index
 488 032c               #    a2: board size
 489 032c               #
 490 032c               get_next_south:
 491 032c 23BDFFFC		addi	$sp, $sp, -4
 492 0330 AFBF0000		sw	$ra, 0($sp)
 493 0334               	
 494 0334               	
 495 0334 20840001		addi	$a0, $a0, 1
 496 0338               	
 497 0338 00C42022		sub	$a0, $a2, $a0		#reverse index
 498 033c 2084FFFF		addi	$a0, $a0, -1
 499 0340               	
 500 0340 0C0000D4		jal	read_board
 501 0344               	
 502 0344 8FBF0000		lw	$ra, 0($sp)
 503 0348 23BD0004		addi	$sp, $sp, 4
 504 034c 03E00008		jr	$ra
 505 0350               
 506 0350               
 507 0350               
 508 0350               
 509 0350               #####################################################
 510 0350               #               Data Acces Functions                #
 511 0350               #####################################################
 512 0350               
 513 0350               #
 514 0350               # Name: read_board
 515 0350               #
 516 0350               # Arguments:
 517 0350               #    a0: x index
 518 0350               #    a1: y index
 519 0350               #
 520 0350               read_board:
 521 0350 3C080000		la	$t0, board_size
     0354 35080000
 522 0358 81080000		lb	$t0, 0($t0)
 523 035c               	#t0 has board width
 524 035c               	
 525 035c 01040018		mul	$t0, $t0, $a0
     0360 00004012
 526 0364 01054020		add	$t0, $t0, $a1
 527 0368               	
 528 0368 3C090000		la	$t1, board
     036c 35290000
 529 0370 01284020		add	$t0, $t1, $t0
 530 0374 81020000		lb	$v0, 0($t0)
 531 0378               	
 532 0378 03E00008		jr	$ra
 533 037c               	
 534 037c               #
 535 037c               # Name: write_board
 536 037c               #
 537 037c               # Arguments:
 538 037c               #    a0: x index
 539 037c               #    a1: y index
 540 037c               #    a2: value
 541 037c               #
 542 037c               write_board:
 543 037c 3C080000		la	$t0, board_size
     0380 35080000
 544 0384 81080000		lb	$t0, 0($t0)
 545 0388               	#t0 has board width
 546 0388               	
 547 0388 01040018		mul	$t0, $t0, $a0
     038c 00004012
 548 0390 01054020		add	$t0, $t0, $a1
 549 0394               	
 550 0394 3C090000		la	$t1, board
     0398 35290000
 551 039c 01284020		add	$t0, $t1, $t0
 552 03a0 A1060000		sb	$a2, 0($t0)
 553 03a4               	
 554 03a4 03E00008		jr	$ra
 555 03a8               	
 556 03a8               
 557 03a8               #####################################################
 558 03a8               #               Data Input Functions                #
 559 03a8               #####################################################
 560 03a8               
 561 03a8               #
 562 03a8               # Name: read_input
 563 03a8               #
 564 03a8               read_input:
 565 03a8 23BDFFF8		addi	$sp, $sp, -8
 566 03ac AFBF0004		sw	$ra, 4($sp)
 567 03b0 AFB00000		sw	$s0, 0($sp)
 568 03b4               
 569 03b4               	#read user input board bounds
 570 03b4 34020005		li	$v0, READ_INT
 571 03b8 0000000C		syscall
 572 03bc               	
 573 03bc               	#confirm starting board bounds
 574 03bc 34080003		li	$t0, 3
 575 03c0 34090009		li	$t1, 9
 576 03c4 3C040000		la	$a0, board_input_error
     03c8 34840000
 577 03cc 0048082A		blt	$v0, $t0, read_input_error
     03d0 14200026
 578 03d4 0122082A		blt	$t1, $v0, read_input_error
     03d8 14200024
 579 03dc               	
 580 03dc               	#write the borad bounds
 581 03dc 3C080000		la	$t0, board_size
     03e0 35080000
 582 03e4 A1020000		sb	$v0, 0($t0)
 583 03e8               	
 584 03e8 00408021		move	$s0, $v0	#s0 will contian the board size
 585 03ec               	
 586 03ec 3C040000		la	$a0, north_hints
     03f0 34840000
 587 03f4 02002821		move	$a1, $s0
 588 03f8 0C000154		jal	load_hints
 589 03fc 1040001B		beq	$v0, $zero, read_input_error
 590 0400               	
 591 0400               	
 592 0400 3C040000		la	$a0, east_hints
     0404 34840000
 593 0408 02002821		move	$a1, $s0
 594 040c 0C000154		jal	load_hints
 595 0410 10400016		beq	$v0, $zero, read_input_error
 596 0414               
 597 0414               
 598 0414 3C040000		la	$a0, south_hints
     0418 34840000
 599 041c 02002821		move	$a1, $s0
 600 0420 0C000154		jal	load_hints
 601 0424 10400011		beq	$v0, $zero, read_input_error
 602 0428               
 603 0428               
 604 0428 3C040000		la	$a0, west_hints
     042c 34840000
 605 0430 02002821		move	$a1, $s0
 606 0434 0C000154		jal	load_hints
 607 0438 1040000C		beq	$v0, $zero, read_input_error
 608 043c               	
 609 043c               	
 610 043c               	
 611 043c 34020005		li	$v0, READ_INT
 612 0440 0000000C		syscall
 613 0444               	
 614 0444 3C040000		la	$a0, fixed_input_error
     0448 34840000
 615 044c 0040082A		blt	$v0, $zero, read_input_error
     0450 14200006
 616 0454               	
 617 0454 00402021		move	$a0, $v0
 618 0458 02002821		move	$a1, $s0
 619 045c 0C000121		jal	load_fixed
 620 0460 10400002		beq	$v0, $zero, read_input_error
 621 0464               	
 622 0464               
 623 0464               
 624 0464               	#all input is good
 625 0464 34020001		li	$v0, 1		#return 1
 626 0468 0800011D		j	read_input_end
 627 046c               
 628 046c               	
 629 046c               read_input_error:
 630 046c               	
 631 046c 0C0001E5		jal	print_string
 632 0470 34020000		li	$v0, 0		#return 0
 633 0474               
 634 0474               read_input_end:
 635 0474 8FBF0004		lw	$ra, 4($sp)
 636 0478 8FB00000		lw	$s0, 0($sp)
 637 047c 23BD0008		addi	$sp, $sp, 8
 638 0480 03E00008		jr	$ra
 639 0484               
 640 0484               
 641 0484               
 642 0484               
 643 0484               
 644 0484               
 645 0484               
 646 0484               #
 647 0484               # Name: load_fixed
 648 0484               #
 649 0484               # Arguments: 
 650 0484               #    $a0: num of fixed towers
 651 0484               #    $a1: board Size
 652 0484               #
 653 0484               load_fixed:
 654 0484 23BDFFEC		addi	$sp, $sp, -20
 655 0488 AFBF0010		sw	$ra, 16($sp)
 656 048c AFB3000C		sw	$s3, 12($sp)
 657 0490 AFB20008		sw	$s2, 8($sp)
 658 0494 AFB10004		sw	$s1, 4($sp)
 659 0498 AFB00000		sw	$s0, 0($sp)
 660 049c               	
 661 049c 00808021		move	$s0, $a0	#s0 contains number of fixed towers
 662 04a0 34110000		li	$s1, 0		#conter
 663 04a4 00A09021		move	$s2, $a1
 664 04a8               	
 665 04a8 34130001		li	$s3, 1
 666 04ac               	
 667 04ac               read_fixed_loop:
 668 04ac               
 669 04ac 12300020		beq	$s1, $s0, load_fixed_done
 670 04b0               	
 671 04b0               	#load x
 672 04b0 34020005		li	$v0, READ_INT
 673 04b4 0000000C		syscall
 674 04b8 00404021		move	$t0, $v0
 675 04bc               	
 676 04bc 0100082A		blt	$t0, $zero, size_fixed_error
     04c0 14200017
 677 04c4 0248082A		blt	$s2, $t0, size_fixed_error
     04c8 14200015
 678 04cc               	
 679 04cc               	#load y
 680 04cc 34020005		li	$v0, READ_INT
 681 04d0 0000000C		syscall
 682 04d4 00404821		move	$t1, $v0
 683 04d8               	
 684 04d8 0120082A		blt	$t1, $zero, size_fixed_error
     04dc 14200010
 685 04e0 0249082A		blt	$s2, $t1, size_fixed_error
     04e4 1420000E
 686 04e8               	
 687 04e8               	#load value
 688 04e8 34020005		li	$v0, READ_INT
 689 04ec 0000000C		syscall
 690 04f0 00405021		move	$t2, $v0
 691 04f4               	
 692 04f4 34190001		li	$t9, 1
 693 04f8 0159082A		blt	$t2, $t9, size_fixed_error
     04fc 14200008
 694 0500 024A082A		blt	$s2, $t2, size_fixed_error
     0504 14200006
 695 0508               	
 696 0508 01002021		move	$a0, $t0
 697 050c 01202821		move	$a1, $t1
 698 0510 01403021		move	$a2, $t2
 699 0514 0C0000DF		jal	write_board
 700 0518               	
 701 0518               	
 702 0518 22310001		addi	$s1, $s1, 1
 703 051c 0800012B		j	read_fixed_loop	
 704 0520               
 705 0520               size_fixed_error:
 706 0520               	
 707 0520 3C040000		la	$a0, fixed_input_error
     0524 34840000
 708 0528 34130000		li	$s3, 0
 709 052c 0800014C		j	load_fixed_done
 710 0530               	
 711 0530               load_fixed_done:
 712 0530 02601021		move	$v0, $s3
 713 0534 8FBF0010		lw	$ra, 16($sp)
 714 0538 8FB3000C		lw	$s3, 12($sp)
 715 053c 8FB20008		lw	$s2, 8($sp)
 716 0540 8FB10004		lw	$s1, 4($sp)
 717 0544 8FB00000		lw	$s0, 0($sp)
 718 0548 23BD0014		addi	$sp, $sp, 20
 719 054c 03E00008		jr	$ra
 720 0550               
 721 0550               
 722 0550               
 723 0550               
 724 0550               
 725 0550               
 726 0550               	
 727 0550               
 728 0550               #
 729 0550               # Name: load_hints
 730 0550               #
 731 0550               # Arguments: 
 732 0550               #    $a0: hint array pointer
 733 0550               #    $a1: board size
 734 0550               #
 735 0550               load_hints:
 736 0550 23BDFFF0		addi	$sp, $sp, -16
 737 0554 AFBF000C		sw	$ra, 12($sp)
 738 0558 AFB20008		sw	$s2, 8($sp)
 739 055c AFB10004		sw	$s1, 4($sp)
 740 0560 AFB00000		sw	$s0, 0($sp)
 741 0564               	
 742 0564 00808021		move	$s0, $a0
 743 0568 00A08821		move	$s1, $a1
 744 056c               	
 745 056c 34080000		li	$t0, 0		#counter
 746 0570 34130001		li	$s3, 1
 747 0574               read_input_loop:
 748 0574               	
 749 0574 1111000E		beq	$t0, $s1, load_hints_done
 750 0578               	
 751 0578 34020005		li	$v0, READ_INT
 752 057c 0000000C		syscall
 753 0580               	
 754 0580 0040082A		blt	$v0, $zero, size_input_error
     0584 14200006
 755 0588 0222082A		blt	$s1, $v0, size_input_error
     058c 14200004
 756 0590               	
 757 0590               	
 758 0590 A2020000		sb	$v0, 0($s0)
 759 0594 22100001		addi	$s0, $s0, 1
 760 0598               
 761 0598 21080001		addi	$t0, $t0, 1
 762 059c 0800015D		j	read_input_loop
 763 05a0               
 764 05a0               	
 765 05a0               size_input_error:
 766 05a0               	
 767 05a0 3C040000		la	$a0, illegal_input_error
     05a4 34840000
 768 05a8 34130000		li	$s3, 0
 769 05ac 0800016C		j	load_hints_done
 770 05b0               	
 771 05b0               load_hints_done:
 772 05b0 02601021		move	$v0, $s3
 773 05b4 8FBF000C		lw	$ra, 12($sp)
 774 05b8 8FB10008		lw	$s1, 8($sp)
 775 05bc 8FB10004		lw	$s1, 4($sp)
 776 05c0 8FB00000		lw	$s0, 0($sp)
 777 05c4 23BD0010		addi	$sp, $sp, 16
 778 05c8 03E00008		jr	$ra
 779 05cc               	
 780 05cc               	
 781 05cc               	
 782 05cc               	
 783 05cc               
 784 05cc               #####################################################
 785 05cc               #               Print functions                     #
 786 05cc               #####################################################
 787 05cc               
 788 05cc               #
 789 05cc               # Name: print board
 790 05cc               #
 791 05cc               print_board:
 792 05cc               	
 793 05cc 23BDFFEC		addi	$sp, $sp, -20
 794 05d0 AFBF0010		sw	$ra, 16($sp)
 795 05d4 AFB3000C		sw	$s3, 12($sp)
 796 05d8 AFB20008		sw	$s2, 8($sp)
 797 05dc AFB10004		sw	$s1, 4($sp)
 798 05e0 AFB00000		sw	$s0, 0($sp)
 799 05e4               	
 800 05e4 3C100000		la	$s0, board_size
     05e8 36100000
 801 05ec 82100000		lb	$s0, 0($s0)
 802 05f0 3C110000		la	$s1, board		#s1 contains board pointer
     05f4 36310000
 803 05f8 34120000		li	$s2, 0
 804 05fc               
 805 05fc 3C040000		la	$a0, north_hints
     0600 34840000
 806 0604 0C0001CC		jal	print_x_hints
 807 0608               
 808 0608               print_board_loop_row:
 809 0608               
 810 0608 1250001B		beq	$s2, $s0, print_board_done
 811 060c               
 812 060c 0C0001AC		jal	print_break_row		#print break
 813 0610               
 814 0610 3C040000		la	$a0, west_hints
     0614 34840000
 815 0618 02402821		move	$a1, $s2
 816 061c 0C0001C4		jal	print_y_hint		#print y hint
 817 0620               	
 818 0620 3C040000		la	$a0, spaces
     0624 34840000
 819 0628 0C0001E5		jal	print_string
 820 062c               
 821 062c 3C040000		la	$a0, board_space_front
     0630 34840000
 822 0634 0C0001E5		jal	print_string
 823 0638               	
 824 0638               
 825 0638 00009821		move	$s3, $zero
 826 063c               
 827 063c               
 828 063c               print_board_loop_col:
 829 063c               
 830 063c 12700008		beq	$s3, $s0, print_board_loop_col_done
 831 0640               
 832 0640 82240000		lb	$a0, 0($s1)
 833 0644 0C0001E8		jal	print_number_exclude
 834 0648               
 835 0648 3C040000		la	$a0, board_space_mid
     064c 34840000
 836 0650 0C0001E5		jal	print_string
 837 0654               	
 838 0654 22730001		addi	$s3, $s3, 1
 839 0658 22310001		addi	$s1, $s1, 1
 840 065c 0800018F		j	print_board_loop_col
 841 0660               	
 842 0660               print_board_loop_col_done:
 843 0660               	
 844 0660 3C040000		la	$a0, east_hints
     0664 34840000
 845 0668 02402821		move	$a1, $s2
 846 066c 0C0001C4		jal	print_y_hint
 847 0670               	
 848 0670               	#addi	$s1, $s1, 1
 849 0670 22520001		addi	$s2, $s2, 1
 850 0674               	
 851 0674 08000182		j	print_board_loop_row
 852 0678               
 853 0678               print_board_done:
 854 0678               
 855 0678 0C0001AC		jal	print_break_row
 856 067c               
 857 067c 3C040000		la	$a0, south_hints
     0680 34840000
 858 0684 0C0001CC		jal	print_x_hints
 859 0688               	
 860 0688 3C040000		la	$a0, new_line_char
     068c 34840000
 861 0690 0C0001E5		jal	print_string
 862 0694               
 863 0694 8FBF0010		lw	$ra, 16($sp)
 864 0698 8FB3000C		lw	$s3, 12($sp)
 865 069c 8FB20008		lw	$s2, 8($sp)
 866 06a0 8FB10004		lw	$s1, 4($sp)
 867 06a4 8FB00000		lw	$s0, 0($sp)
 868 06a8 23BD0014		addi	$sp, $sp, 20
 869 06ac 03E00008		jr	$ra
 870 06b0               
 871 06b0               
 872 06b0               #
 873 06b0               # Name: Print break row
 874 06b0               #
 875 06b0               print_break_row:
 876 06b0               	
 877 06b0 23BDFFFC		addi	$sp, $sp, -4
 878 06b4 AFBF0000		sw	$ra, 0($sp)
 879 06b8               
 880 06b8 3C040000		la	$a0, new_line_char
     06bc 34840000
 881 06c0 0C0001E5		jal	print_string
 882 06c4               
 883 06c4 3C040000		la	$a0, spacess
     06c8 34840000
 884 06cc 0C0001E5		jal	print_string
 885 06d0               	
 886 06d0 3C090000		la      $t1, board_size
     06d4 35290000
 887 06d8 81290000		lb      $t1, 0($t1)
 888 06dc               
 889 06dc 34080000		li	$t0, 0
 890 06e0               
 891 06e0               
 892 06e0               print_break_row_loop:
 893 06e0               	
 894 06e0 11280005		beq	$t1, $t0, print_break_row_done
 895 06e4               
 896 06e4 3C040000		la	$a0, board_row_break_part
     06e8 34840000
 897 06ec 0C0001E5		jal	print_string
 898 06f0               
 899 06f0 21080001		addi	$t0, $t0, 1
 900 06f4               
 901 06f4 080001B8		j	print_break_row_loop
 902 06f8               
 903 06f8               print_break_row_done:
 904 06f8 3C040000		la	$a0, plus_char_break
     06fc 34840000
 905 0700 0C0001E5		jal	print_string
 906 0704               	
 907 0704 8FBF0000		lw	$ra, 0($sp)
 908 0708 23BD0004		addi	$sp, $sp, 4
 909 070c               	
 910 070c 03E00008		jr	$ra
 911 0710               
 912 0710               
 913 0710               #
 914 0710               # Name: print y hint
 915 0710               #
 916 0710               # Arguments:
 917 0710               #    $a0: pointer to array
 918 0710               #    $a1: index
 919 0710               #
 920 0710               print_y_hint:
 921 0710 23BDFFFC		addi	$sp, $sp, -4
 922 0714 AFBF0000		sw	$ra, 0($sp)
 923 0718               
 924 0718 00852020		add	$a0, $a0, $a1
 925 071c 80840000		lb	$a0, 0($a0)
 926 0720 0C0001E8		jal	print_number_exclude
 927 0724               
 928 0724 8FBF0000		lw	$ra, 0($sp)
 929 0728 23BD0004		addi	$sp, $sp, 4
 930 072c 03E00008		jr	$ra
 931 0730               
 932 0730               
 933 0730               
 934 0730               #
 935 0730               # Name: prints x axis hints
 936 0730               #
 937 0730               # Arguments: 
 938 0730               #     $a0: pointer to hint array
 939 0730               #
 940 0730               print_x_hints:
 941 0730 23BDFFFC		addi	$sp, $sp, -4
 942 0734 AFBF0000		sw	$ra, 0($sp)
 943 0738               	
 944 0738 00805021		move	$t2, $a0
 945 073c               
 946 073c 3C090000		la      $t1, board_size
     0740 35290000
 947 0744 81290000		lb      $t1, 0($t1)
 948 0748               
 949 0748 34080000		li	$t0, 0
 950 074c               	
 951 074c 3C040000		la	$a0, spacess
     0750 34840000
 952 0754 0C0001E5		jal	print_string
 953 0758               
 954 0758               print_x_hints_loop: 
 955 0758               	
 956 0758 1128000B		beq	$t1, $t0, print_x_hints_done
 957 075c               	
 958 075c 3C040000		la	$a0, spacess
     0760 34840000
 959 0764 0C0001E5		jal	print_string
 960 0768               
 961 0768 81440000		lb	$a0, 0($t2)
 962 076c               	
 963 076c 0C0001E8		jal	print_number_exclude
 964 0770               
 965 0770 3C040000		la	$a0, spaces
     0774 34840000
 966 0778 0C0001E5		jal	print_string
 967 077c               	
 968 077c 214A0001		addi	$t2, $t2, 1
 969 0780 21080001		addi	$t0, $t0, 1
 970 0784               
 971 0784 080001D6		j	print_x_hints_loop
 972 0788               
 973 0788               print_x_hints_done:
 974 0788               	
 975 0788 8FBF0000		lw	$ra, 0($sp)
 976 078c 23BD0004		addi	$sp, $sp, 4
 977 0790               	
 978 0790 03E00008		jr	$ra
 979 0794               
 980 0794               
 981 0794               
 982 0794               print_string:
 983 0794 34020004		li	$v0, PRINT_STRING
 984 0798 0000000C		syscall
 985 079c               
 986 079c 03E00008		jr	$ra
 987 07a0               
 988 07a0               
 989 07a0               
 990 07a0               #
 991 07a0               # Name: print_number_exclude
 992 07a0               #    prints numbers excluding zero
 993 07a0               #
 994 07a0               #
 995 07a0               print_number_exclude:
 996 07a0 23BDFFFC		addi	$sp, $sp, -4
 997 07a4 AFBF0000		sw	$ra, 0($sp)
 998 07a8               	
 999 07a8 10800003		beq	$a0, $zero, print_space
1000 07ac               	
1001 07ac 34020001		li	$v0, PRINT_INT
1002 07b0 0000000C		syscall
1003 07b4               	
1004 07b4 080001F1		j	done_print_number_exclude
1005 07b8               	
1006 07b8               print_space:
1007 07b8 3C040000		la	$a0, spaces
     07bc 34840000
1008 07c0 0C0001E5		jal	print_string
1009 07c4               	
1010 07c4               done_print_number_exclude:
1011 07c4               
1012 07c4 8FBF0000		lw	$ra, 0($sp)
1013 07c8 23BD0004		addi	$sp, $sp, 4
1014 07cc 03E00008		jr	$ra
1015 07d0               
1016 07d0               #
1017 07d0               # Name: print_number
1018 07d0               #    prints numbers
1019 07d0               #
1020 07d0               #
1021 07d0               print_number:
1022 07d0 34020001		li	$v0, PRINT_INT
1023 07d4 0000000C		syscall
1024 07d8               
1025 07d8 03E00008		jr	$ra
1026 07dc               
1027 07dc               
1028 07dc               
1029 07dc               


EXIT                           = 0000000A   
PRINT_INT                      = 00000001   
PRINT_STRING                   = 00000004   
READ_INT                       = 00000005   
board                            00000001 R  data 
board_input_error                0000019B R  data 
board_row_break_part             00000181 R  data 
board_size                       00000000 R  data 
board_space_back                 00000190 R  data 
board_space_front                00000189 R  data 
board_space_mid                  0000018C R  data 
check_fail                       00000284 R  text 
continue_check_loop              00000268 R  text 
done_print_number_exclude        000007C4 R  text 
done_validate                    000001BC R  text 
east_hints                       00000141 R  data 
eval                             00000050 R  text 
eval_end                         0000010C R  text 
eval_loop                        000000BC R  text 
eval_loop_bottom                 000000FC R  text 
eval_loop_done                   00000108 R  text 
eval_not_found_fixed             000000B8 R  text 
fixed_input_error                00000230 R  data 
fixed_number_input_error         000001F7 R  data 
generic_check_board              000001CC R  text 
generic_check_loop_col           00000208 R  text 
generic_check_loop_done_col      0000028C R  text 
generic_check_loop_done_row      00000270 R  text 
generic_check_loop_found_zero    00000278 R  text 
generic_check_loop_row           0000021C R  text 
get_next_east                    00000300 R  text 
get_next_north                   000002C0 R  text 
get_next_south                   0000032C R  text 
get_next_west                    000002DC R  text 
illegal_input_error              000001C9 R  data 
load_fixed                       00000484 R  text 
load_fixed_done                  00000530 R  text 
load_hints                       00000550 R  text 
load_hints_done                  000005B0 R  text 
main                             00000000 R  text 
main_done                        00000040 R  text 
new_line_char                    00000194 R  data 
no_last_fixed_space              0000009C R  text 
north_hints                      00000101 R  data 
not_last_place                   000000DC R  text 
pass_add                         00000264 R  text 
plus_char_break                  00000186 R  data 
print_board                      000005CC R  text 
print_board_done                 00000678 R  text 
print_board_loop_col             0000063C R  text 
print_board_loop_col_done        00000660 R  text 
print_board_loop_row             00000608 R  text 
print_break_row                  000006B0 R  text 
print_break_row_done             000006F8 R  text 
print_break_row_loop             000006E0 R  text 
print_number                     000007D0 R  text 
print_number_exclude             000007A0 R  text 
print_space                      000007B8 R  text 
print_string                     00000794 R  text 
print_x_hints                    00000730 R  text 
print_x_hints_done               00000788 R  text 
print_x_hints_loop               00000758 R  text 
print_y_hint                     00000710 R  text 
read_board                       00000350 R  text 
read_fixed_loop                  000004AC R  text 
read_input                       000003A8 R  text 
read_input_end                   00000474 R  text 
read_input_error                 0000046C R  text 
read_input_loop                  00000574 R  text 
size_fixed_error                 00000520 R  text 
size_input_error                 000005A0 R  text 
south_hints                      00000121 R  data 
spaces                           00000199 R  data 
spacess                          00000196 R  data 
validate_board                   00000134 R  text 
west_hints                       00000161 R  data 
write_board                      0000037C R  text 
