   1 0000               
   2 0000               
   3 0000               
   4 0000               PRINT_INT = 1
   5 0000               PRINT_STRING = 4
   6 0000               READ_INT = 5
   7 0000               EXIT = 10
   8 0000               
   9 0000               	.data
  10 0000               	.align	0
  11 0000               
  12 0000               
  13 0000               
  14 0000               board_size:
  15 0000 00      		.byte	0
  16 0001               board:
  17 0001 00000000		.space	256
          00000000
          00000000
          00000000
          00000000
          00000000
  18 0101               north_hints:
  19 0101 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  20 0121               south_hints:
  21 0121 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  22 0141               east_hints:
  23 0141 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  24 0161               west_hints:
  25 0161 00000000		.space	32
          00000000
          00000000
          00000000
          00000000
          00000000
  26 0181               
  27 0181               
  28 0181               here_str:
  29 0181 48455245		.asciiz "HERE!\n"
          210A00  
  30 0188               board_row_break_part:
  31 0188 2B2D2D2D		.asciiz "+---"
          00      
  32 018d               plus_char_break:
  33 018d 2B0A00  		.asciiz "+\n"
  34 0190               board_space_front:
  35 0190 7C2000  		.asciiz "| "
  36 0193               board_space_mid:
  37 0193 207C2000		.asciiz " | "
  38 0197               board_space_back:
  39 0197 207C0A00		.asciiz " |\n"
  40 019b               new_line_char:
  41 019b 0A00    		.asciiz "\n"
  42 019d               spacesss:
  43 019d 20202000		.asciiz "   "
  44 01a1               spacess:
  45 01a1 202000  		.asciiz "  "
  46 01a4               spaces:
  47 01a4 2000    		.asciiz " "
  48 01a6               	
  49 01a6               board_input_error:
  50 01a6 0A496E76		.asciiz "\nInvalid board size, Skyscrapers terminating\n"
          616C6964
          20626F61
          72642073
          697A652C
          20536B79
  51 01d4               illegal_input_error:
  52 01d4 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  53 0202               fixed_number_input_error:
  54 0202 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
  55 023b               fixed_input_error:
  56 023b 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
  57 0270               	
  58 0270               	
  59 0000               	.text
  60 0000               	.align	2
  61 0000               
  62 0000               #####################################################
  63 0000               #                  Program area                     #
  64 0000               #####################################################
  65 0000               
  66 0000               
  67 0000               #
  68 0000               # Name: Main
  69 0000               #
  70 0000               main:
  71 0000 23BDFFF8		addi	$sp, $sp, -8
  72 0004 AFBF0004		sw	$ra, 4($sp)
  73 0008 AFB00000		sw	$s0, 0($sp)
  74 000c               	
  75 000c 0C000081		jal	read_input
  76 0010 1040000A		beq	$v0, $zero, main_done	#end if it returned false.
  77 0014               	
  78 0014 0C00010A		jal	print_board
  79 0018               	
  80 0018               	
  81 0018               	
  82 0018 3C040000		la	$a0, board
     001c 34840000
  83 0020 34050000		li	$a1, 0
  84 0024 3C080000		la	$t0, board_size
     0028 35080000
  85 002c 81060000		lb	$a2, 0($t0)
  86 0030 00C60018		mul	$a3, $a2, $a2
     0034 00003812
  87 0038               	
  88 0038 0C000013		jal	eval
  89 003c               	
  90 003c               
  91 003c               main_done:
  92 003c 8FBF0004		lw	$ra, 4($sp)
  93 0040 8FB00000		lw	$s0, 0($sp)
  94 0044 23BD0008		addi	$sp, $sp, 8
  95 0048 03E00008		jr	$ra
  96 004c               
  97 004c               
  98 004c               
  99 004c               
 100 004c               #####################################################
 101 004c               #                    Sim eval                       #
 102 004c               #####################################################
 103 004c               
 104 004c               #
 105 004c               # Name: eval
 106 004c               #
 107 004c               # Arguments:
 108 004c               #    a0: board location pointer
 109 004c               #    a1: board locaiton counter
 110 004c               #    a2: board bound
 111 004c               #    a3: board length
 112 004c               #
 113 004c               eval:
 114 004c 23BDFFE0		addi	$sp, $sp, -32
 115 0050 AFBF001C		sw	$ra, 28($sp)
 116 0054 AFB60018		sw	$s6, 24($sp)
 117 0058 AFB50014		sw	$s5, 20($sp)
 118 005c AFB40010		sw	$s4, 16($sp)
 119 0060 AFB3000C		sw	$s3, 12($sp)
 120 0064 AFB20008		sw	$s2, 8($sp)
 121 0068 AFB10004		sw	$s1, 4($sp)
 122 006c AFB00000		sw	$s0, 0($sp)
 123 0070               	
 124 0070 00808021		move	$s0, $a0				#save board pointer
 125 0074 00A08821		move	$s1, $a1				#save locaiton counter
 126 0078 00C09021		move	$s2, $a2				#save board bound
 127 007c 00E09821		move	$s3, $a3				#save board length
 128 0080               	
 129 0080               	#debug
 130 0080 0C00010A		jal	print_board
 131 0084               	
 132 0084 82150000		lb	$s5, 0($s0)				#save current value
 133 0088               	
 134 0088 12A00009		beq	$s5, $zero, eval_not_found_fixed	#if the current location is 0 branch
 135 008c               	
 136 008c               	#fixed found if here
 137 008c               	
 138 008c 16330002		bne	$s1, $s3, no_last_fixed_space		#if its the last fixed space, continue
 139 0090               	
 140 0090 0C000048		jal	validate_board
 141 0094               	#v0 is set if valid
 142 0094               	
 143 0094 0800003D		j	eval_end
 144 0098               
 145 0098               no_last_fixed_space:
 146 0098               	
 147 0098 22040001		addi	$a0, $s0, 1				#tick board pointer
 148 009c 22250001		addi	$a1, $s1, 1				#tick counter
 149 00a0 02403021		move	$a2, $s2				
 150 00a4 02603821		move	$a3, $s3
 151 00a8               	
 152 00a8 0C000013		jal	eval					#recurse
 153 00ac               
 154 00ac 0800003D		j	eval_end
 155 00b0               
 156 00b0               eval_not_found_fixed:
 157 00b0               	
 158 00b0 34140001		li	$s4, 1					#s4 is our counter for the loop (cant use 0)
 159 00b4               	
 160 00b4               eval_loop:
 161 00b4               	
 162 00b4 1292000E		beq	$s4, $s2, eval_loop_done
 163 00b8               	
 164 00b8 A2140000		sb	$s4, 0($s0)				#write to board
 165 00bc 0C000048		jal	validate_board				#place
 166 00c0               	
 167 00c0 10400008		beq	$v0, $zero, eval_loop_bottom		#branch if bad place
 168 00c4               	
 169 00c4 16330001		bne	$s1, $s3, not_last_place
 170 00c8               	
 171 00c8               	#was last place
 172 00c8               	#was good place so return ture
 173 00c8               	#li	$v0, 1
 174 00c8               	
 175 00c8               	
 176 00c8               	
 177 00c8 0800003D		j	eval_end
 178 00cc               	
 179 00cc               	
 180 00cc               not_last_place:
 181 00cc 22040001		addi	$a0, $s0, 1				#tick board pointer
 182 00d0 22250001		addi	$a1, $s1, 1				#tick counter
 183 00d4 02403021		move	$a2, $s2				
 184 00d8 02603821		move	$a3, $s3
 185 00dc               	
 186 00dc 0C000013		jal	eval					#recurse
 187 00e0               	
 188 00e0 14400004		bne	$v0, $zero, eval_end
 189 00e4               	
 190 00e4               eval_loop_bottom:
 191 00e4 A2000000		sb	$zero, 0($s0)				#rest board locaiton
 192 00e8 22940001		addi	$s4, $s4, 1				#tick
 193 00ec 0800002D		j	eval_loop
 194 00f0               	
 195 00f0               	
 196 00f0               eval_loop_done:
 197 00f0 0800003D		j	eval_end
 198 00f4               	
 199 00f4               	
 200 00f4               
 201 00f4               
 202 00f4               eval_end:
 203 00f4 02601021		move	$v0, $s3
 204 00f8 8FBF001C		lw	$ra, 28($sp)
 205 00fc 8FB60018		lw	$s6, 24($sp)
 206 0100 8FB50014		lw	$s5, 20($sp)
 207 0104 8FB40010		lw	$s4, 16($sp)
 208 0108 8FB3000C		lw	$s3, 12($sp)
 209 010c 8FB20008		lw	$s2, 8($sp)
 210 0110 8FB10004		lw	$s1, 4($sp)
 211 0114 8FB00000		lw	$s0, 0($sp)
 212 0118 23BD0020		addi	$sp, $sp, 32
 213 011c 03E00008		jr	$ra
 214 0120               
 215 0120               
 216 0120               
 217 0120               
 218 0120               #
 219 0120               # Name: validate_board
 220 0120               #
 221 0120               #
 222 0120               validate_board:
 223 0120 23BDFFE0		addi	$sp, $sp, -32
 224 0124 AFBF001C		sw	$ra, 28($sp)
 225 0128 AFB60018		sw	$s6, 24($sp)
 226 012c AFB50014		sw	$s5, 20($sp)
 227 0130 AFB40010		sw	$s4, 16($sp)
 228 0134 AFB3000C		sw	$s3, 12($sp)
 229 0138 AFB20008		sw	$s2, 8($sp)
 230 013c AFB10004		sw	$s1, 4($sp)
 231 0140 AFB00000		sw	$s0, 0($sp)
 232 0144               	
 233 0144               	
 234 0144               	
 235 0144               	
 236 0144               	
 237 0144               	
 238 0144               	#returns true
 239 0144 34020000		li	$v0, 0
 240 0148               	
 241 0148               	
 242 0148 8FBF001C		lw	$ra, 28($sp)
 243 014c 8FB60018		lw	$s6, 24($sp)
 244 0150 8FB50014		lw	$s5, 20($sp)
 245 0154 8FB40010		lw	$s4, 16($sp)
 246 0158 8FB3000C		lw	$s3, 12($sp)
 247 015c 8FB20008		lw	$s2, 8($sp)
 248 0160 8FB10004		lw	$s1, 4($sp)
 249 0164 8FB00000		lw	$s0, 0($sp)
 250 0168 23BD0020		addi	$sp, $sp, 32
 251 016c 03E00008		jr	$ra
 252 0170               
 253 0170               
 254 0170               
 255 0170               
 256 0170               
 257 0170               
 258 0170               
 259 0170               #####################################################
 260 0170               #               Data Acces Functions                #
 261 0170               #####################################################
 262 0170               
 263 0170               #
 264 0170               # Name: read_board
 265 0170               #
 266 0170               # Arguments:
 267 0170               #    a0: x index
 268 0170               #    a1: y index
 269 0170               #
 270 0170               read_board:
 271 0170 3C080000		la	$t0, board_size
     0174 35080000
 272 0178 81080000		lb	$t0, 0($t0)
 273 017c               	#t0 has board width
 274 017c               	
 275 017c 01040018		mul	$t0, $t0, $a0
     0180 00004012
 276 0184 01054020		add	$t0, $t0, $a1
 277 0188               	
 278 0188 3C090000		la	$t1, board
     018c 35290000
 279 0190 01284020		add	$t0, $t1, $t0
 280 0194 81020000		lb	$v0, 0($t0)
 281 0198               	
 282 0198 03E00008		jr	$ra
 283 019c               	
 284 019c               #
 285 019c               # Name: write_board
 286 019c               #
 287 019c               # Arguments:
 288 019c               #    a0: x index
 289 019c               #    a1: y index
 290 019c               #    a2: value
 291 019c               #
 292 019c               write_board:
 293 019c 3C080000		la	$t0, board_size
     01a0 35080000
 294 01a4 81080000		lb	$t0, 0($t0)
 295 01a8               	#t0 has board width
 296 01a8               	
 297 01a8 01040018		mul	$t0, $t0, $a0
     01ac 00004012
 298 01b0 01054020		add	$t0, $t0, $a1
 299 01b4               	
 300 01b4 3C090000		la	$t1, board
     01b8 35290000
 301 01bc 01284020		add	$t0, $t1, $t0
 302 01c0 A1060000		sb	$a2, 0($t0)
 303 01c4               	
 304 01c4 03E00008		jr	$ra
 305 01c8               	
 306 01c8               
 307 01c8               
 308 01c8               #
 309 01c8               # Name: get_<direction>_hint
 310 01c8               #
 311 01c8               # Arguments: 
 312 01c8               #     $a0: index
 313 01c8               #
 314 01c8               get_north_hint:
 315 01c8 3C050000		la	$a1, north_hints
     01cc 34A50000
 316 01d0 0800007E		j	get_hint
 317 01d4               get_south_hint:
 318 01d4 3C050000		la	$a1, south_hints
     01d8 34A50000
 319 01dc 0800007E		j	get_hint
 320 01e0               get_east_hint:
 321 01e0 3C050000		la	$a1, east_hints
     01e4 34A50000
 322 01e8 0800007E		j	get_hint
 323 01ec               get_west_hint:
 324 01ec 3C050000		la	$a1, west_hints
     01f0 34A50000
 325 01f4 0800007E		j	get_hint
 326 01f8               get_hint:
 327 01f8 00852820		add	$a1, $a0, $a1
 328 01fc 80A20000		lb	$v0, 0($a1)
 329 0200 03E00008		jr	$ra
 330 0204               
 331 0204               #####################################################
 332 0204               #               Data Input Functions                #
 333 0204               #####################################################
 334 0204               
 335 0204               #
 336 0204               # Name: read_input
 337 0204               #
 338 0204               read_input:
 339 0204 23BDFFF8		addi	$sp, $sp, -8
 340 0208 AFBF0004		sw	$ra, 4($sp)
 341 020c AFB00000		sw	$s0, 0($sp)
 342 0210               
 343 0210               	#read user input board bounds
 344 0210 34020005		li	$v0, READ_INT
 345 0214 0000000C		syscall
 346 0218               	
 347 0218               	#confirm starting board bounds
 348 0218 34080003		li	$t0, 3
 349 021c 34090009		li	$t1, 9
 350 0220 3C040000		la	$a0, board_input_error
     0224 34840000
 351 0228 0048082A		blt	$v0, $t0, read_input_error
     022c 14200026
 352 0230 0122082A		blt	$t1, $v0, read_input_error
     0234 14200024
 353 0238               	
 354 0238               	#write the borad bounds
 355 0238 3C080000		la	$t0, board_size
     023c 35080000
 356 0240 A1020000		sb	$v0, 0($t0)
 357 0244               	
 358 0244 00408021		move	$s0, $v0	#s0 will contian the board size
 359 0248               	
 360 0248 3C040000		la	$a0, north_hints
     024c 34840000
 361 0250 02002821		move	$a1, $s0
 362 0254 0C0000EB		jal	load_hints
 363 0258 1040001B		beq	$v0, $zero, read_input_error
 364 025c               	
 365 025c               	
 366 025c 3C040000		la	$a0, east_hints
     0260 34840000
 367 0264 02002821		move	$a1, $s0
 368 0268 0C0000EB		jal	load_hints
 369 026c 10400016		beq	$v0, $zero, read_input_error
 370 0270               
 371 0270               
 372 0270 3C040000		la	$a0, south_hints
     0274 34840000
 373 0278 02002821		move	$a1, $s0
 374 027c 0C0000EB		jal	load_hints
 375 0280 10400011		beq	$v0, $zero, read_input_error
 376 0284               
 377 0284               
 378 0284 3C040000		la	$a0, west_hints
     0288 34840000
 379 028c 02002821		move	$a1, $s0
 380 0290 0C0000EB		jal	load_hints
 381 0294 1040000C		beq	$v0, $zero, read_input_error
 382 0298               	
 383 0298               	
 384 0298               	
 385 0298 34020005		li	$v0, READ_INT
 386 029c 0000000C		syscall
 387 02a0               	
 388 02a0 3C040000		la	$a0, fixed_input_error
     02a4 34840000
 389 02a8 0040082A		blt	$v0, $zero, read_input_error
     02ac 14200006
 390 02b0               	
 391 02b0 00402021		move	$a0, $v0
 392 02b4 02002821		move	$a1, $s0
 393 02b8 0C0000B8		jal	load_fixed
 394 02bc 10400002		beq	$v0, $zero, read_input_error
 395 02c0               	
 396 02c0               
 397 02c0               
 398 02c0               	#all input is good
 399 02c0 34020001		li	$v0, 1		#return 1
 400 02c4 080000B4		j	read_input_end
 401 02c8               
 402 02c8               	
 403 02c8               read_input_error:
 404 02c8               	
 405 02c8 0C00017C		jal	print_string
 406 02cc 34020000		li	$v0, 0		#return 0
 407 02d0               
 408 02d0               read_input_end:
 409 02d0 8FBF0004		lw	$ra, 4($sp)
 410 02d4 8FB00000		lw	$s0, 0($sp)
 411 02d8 23BD0008		addi	$sp, $sp, 8
 412 02dc 03E00008		jr	$ra
 413 02e0               
 414 02e0               
 415 02e0               
 416 02e0               
 417 02e0               
 418 02e0               
 419 02e0               
 420 02e0               #
 421 02e0               # Name: load_fixed
 422 02e0               #
 423 02e0               # Arguments: 
 424 02e0               #    $a0: num of fixed towers
 425 02e0               #    $a1: board Size
 426 02e0               #
 427 02e0               load_fixed:
 428 02e0 23BDFFEC		addi	$sp, $sp, -20
 429 02e4 AFBF0010		sw	$ra, 16($sp)
 430 02e8 AFB3000C		sw	$s3, 12($sp)
 431 02ec AFB20008		sw	$s2, 8($sp)
 432 02f0 AFB10004		sw	$s1, 4($sp)
 433 02f4 AFB00000		sw	$s0, 0($sp)
 434 02f8               	
 435 02f8 00808021		move	$s0, $a0	#s0 contains number of fixed towers
 436 02fc 34110000		li	$s1, 0		#conter
 437 0300 00A09021		move	$s2, $a1
 438 0304               	
 439 0304 34130001		li	$s3, 1
 440 0308               	
 441 0308               read_fixed_loop:
 442 0308               
 443 0308 12300020		beq	$s1, $s0, load_fixed_done
 444 030c               	
 445 030c               	#load x
 446 030c 34020005		li	$v0, READ_INT
 447 0310 0000000C		syscall
 448 0314 00404021		move	$t0, $v0
 449 0318               	
 450 0318 0100082A		blt	$t0, $zero, size_fixed_error
     031c 14200017
 451 0320 0248082A		blt	$s2, $t0, size_fixed_error
     0324 14200015
 452 0328               	
 453 0328               	#load y
 454 0328 34020005		li	$v0, READ_INT
 455 032c 0000000C		syscall
 456 0330 00404821		move	$t1, $v0
 457 0334               	
 458 0334 0120082A		blt	$t1, $zero, size_fixed_error
     0338 14200010
 459 033c 0249082A		blt	$s2, $t1, size_fixed_error
     0340 1420000E
 460 0344               	
 461 0344               	#load value
 462 0344 34020005		li	$v0, READ_INT
 463 0348 0000000C		syscall
 464 034c 00405021		move	$t2, $v0
 465 0350               	
 466 0350 34190001		li	$t9, 1
 467 0354 0159082A		blt	$t2, $t9, size_fixed_error
     0358 14200008
 468 035c 024A082A		blt	$s2, $t2, size_fixed_error
     0360 14200006
 469 0364               	
 470 0364 01002021		move	$a0, $t0
 471 0368 01202821		move	$a1, $t1
 472 036c 01403021		move	$a2, $t2
 473 0370 0C000067		jal	write_board
 474 0374               	
 475 0374               	
 476 0374 22310001		addi	$s1, $s1, 1
 477 0378 080000C2		j	read_fixed_loop	
 478 037c               
 479 037c               size_fixed_error:
 480 037c               	
 481 037c 3C040000		la	$a0, fixed_input_error
     0380 34840000
 482 0384 34130000		li	$s3, 0
 483 0388 080000E3		j	load_fixed_done
 484 038c               	
 485 038c               load_fixed_done:
 486 038c 02601021		move	$v0, $s3
 487 0390 8FBF0010		lw	$ra, 16($sp)
 488 0394 8FB3000C		lw	$s3, 12($sp)
 489 0398 8FB20008		lw	$s2, 8($sp)
 490 039c 8FB10004		lw	$s1, 4($sp)
 491 03a0 8FB00000		lw	$s0, 0($sp)
 492 03a4 23BD0014		addi	$sp, $sp, 20
 493 03a8 03E00008		jr	$ra
 494 03ac               
 495 03ac               
 496 03ac               
 497 03ac               
 498 03ac               
 499 03ac               
 500 03ac               	
 501 03ac               
 502 03ac               #
 503 03ac               # Name: load_hints
 504 03ac               #
 505 03ac               # Arguments: 
 506 03ac               #    $a0: hint array pointer
 507 03ac               #    $a1: board size
 508 03ac               #
 509 03ac               load_hints:
 510 03ac 23BDFFF0		addi	$sp, $sp, -16
 511 03b0 AFBF000C		sw	$ra, 12($sp)
 512 03b4 AFB20008		sw	$s2, 8($sp)
 513 03b8 AFB10004		sw	$s1, 4($sp)
 514 03bc AFB00000		sw	$s0, 0($sp)
 515 03c0               	
 516 03c0 00808021		move	$s0, $a0
 517 03c4 00A08821		move	$s1, $a1
 518 03c8               	
 519 03c8 34080000		li	$t0, 0		#counter
 520 03cc 34130001		li	$s3, 1
 521 03d0               read_input_loop:
 522 03d0               	
 523 03d0 1111000E		beq	$t0, $s1, load_hints_done
 524 03d4               	
 525 03d4 34020005		li	$v0, READ_INT
 526 03d8 0000000C		syscall
 527 03dc               	
 528 03dc 0040082A		blt	$v0, $zero, size_input_error
     03e0 14200006
 529 03e4 0222082A		blt	$s1, $v0, size_input_error
     03e8 14200004
 530 03ec               	
 531 03ec               	
 532 03ec A2020000		sb	$v0, 0($s0)
 533 03f0 22100001		addi	$s0, $s0, 1
 534 03f4               
 535 03f4 21080001		addi	$t0, $t0, 1
 536 03f8 080000F4		j	read_input_loop
 537 03fc               
 538 03fc               	
 539 03fc               size_input_error:
 540 03fc               	
 541 03fc 3C040000		la	$a0, illegal_input_error
     0400 34840000
 542 0404 34130000		li	$s3, 0
 543 0408 08000103		j	load_hints_done
 544 040c               	
 545 040c               load_hints_done:
 546 040c 02601021		move	$v0, $s3
 547 0410 8FBF000C		lw	$ra, 12($sp)
 548 0414 8FB10008		lw	$s1, 8($sp)
 549 0418 8FB10004		lw	$s1, 4($sp)
 550 041c 8FB00000		lw	$s0, 0($sp)
 551 0420 23BD0010		addi	$sp, $sp, 16
 552 0424 03E00008		jr	$ra
 553 0428               	
 554 0428               	
 555 0428               	
 556 0428               	
 557 0428               
 558 0428               #####################################################
 559 0428               #               Print functions                     #
 560 0428               #####################################################
 561 0428               
 562 0428               #
 563 0428               # Name: print board
 564 0428               #
 565 0428               print_board:
 566 0428               	
 567 0428 23BDFFEC		addi	$sp, $sp, -20
 568 042c AFBF0010		sw	$ra, 16($sp)
 569 0430 AFB3000C		sw	$s3, 12($sp)
 570 0434 AFB20008		sw	$s2, 8($sp)
 571 0438 AFB10004		sw	$s1, 4($sp)
 572 043c AFB00000		sw	$s0, 0($sp)
 573 0440               	
 574 0440 3C100000		la	$s0, board_size
     0444 36100000
 575 0448 82100000		lb	$s0, 0($s0)
 576 044c 3C110000		la	$s1, board		#s1 contains board pointer
     0450 36310000
 577 0454 34120000		li	$s2, 0
 578 0458               
 579 0458 3C040000		la	$a0, north_hints
     045c 34840000
 580 0460 0C000163		jal	print_x_hints
 581 0464               
 582 0464               print_board_loop_row:
 583 0464               
 584 0464 1250001B		beq	$s2, $s0, print_board_done
 585 0468               
 586 0468 0C000143		jal	print_break_row		#print break
 587 046c               
 588 046c 3C040000		la	$a0, west_hints
     0470 34840000
 589 0474 02402821		move	$a1, $s2
 590 0478 0C00015B		jal	print_y_hint		#print y hint
 591 047c               	
 592 047c 3C040000		la	$a0, spaces
     0480 34840000
 593 0484 0C00017C		jal	print_string
 594 0488               
 595 0488 3C040000		la	$a0, board_space_front
     048c 34840000
 596 0490 0C00017C		jal	print_string
 597 0494               	
 598 0494               
 599 0494 00009821		move	$s3, $zero
 600 0498               
 601 0498               
 602 0498               print_board_loop_col:
 603 0498               
 604 0498 12700008		beq	$s3, $s0, print_board_loop_col_done
 605 049c               
 606 049c 82240000		lb	$a0, 0($s1)
 607 04a0 0C000184		jal	print_number_exclude
 608 04a4               
 609 04a4 3C040000		la	$a0, board_space_mid
     04a8 34840000
 610 04ac 0C00017C		jal	print_string
 611 04b0               	
 612 04b0 22730001		addi	$s3, $s3, 1
 613 04b4 22310001		addi	$s1, $s1, 1
 614 04b8 08000126		j	print_board_loop_col
 615 04bc               	
 616 04bc               print_board_loop_col_done:
 617 04bc               	
 618 04bc 3C040000		la	$a0, east_hints
     04c0 34840000
 619 04c4 02402821		move	$a1, $s2
 620 04c8 0C00015B		jal	print_y_hint
 621 04cc               	
 622 04cc               	#addi	$s1, $s1, 1
 623 04cc 22520001		addi	$s2, $s2, 1
 624 04d0               	
 625 04d0 08000119		j	print_board_loop_row
 626 04d4               
 627 04d4               print_board_done:
 628 04d4               
 629 04d4 0C000143		jal	print_break_row
 630 04d8               
 631 04d8 3C040000		la	$a0, south_hints
     04dc 34840000
 632 04e0 0C000163		jal	print_x_hints
 633 04e4               	
 634 04e4 3C040000		la	$a0, new_line_char
     04e8 34840000
 635 04ec 0C00017C		jal	print_string
 636 04f0               
 637 04f0 8FBF0010		lw	$ra, 16($sp)
 638 04f4 8FB3000C		lw	$s3, 12($sp)
 639 04f8 8FB20008		lw	$s2, 8($sp)
 640 04fc 8FB10004		lw	$s1, 4($sp)
 641 0500 8FB00000		lw	$s0, 0($sp)
 642 0504 23BD0014		addi	$sp, $sp, 20
 643 0508 03E00008		jr	$ra
 644 050c               
 645 050c               
 646 050c               #
 647 050c               # Name: Print break row
 648 050c               #
 649 050c               print_break_row:
 650 050c               	
 651 050c 23BDFFFC		addi	$sp, $sp, -4
 652 0510 AFBF0000		sw	$ra, 0($sp)
 653 0514               
 654 0514 3C040000		la	$a0, new_line_char
     0518 34840000
 655 051c 0C00017C		jal	print_string
 656 0520               
 657 0520 3C040000		la	$a0, spacess
     0524 34840000
 658 0528 0C00017C		jal	print_string
 659 052c               	
 660 052c 3C090000		la      $t1, board_size
     0530 35290000
 661 0534 81290000		lb      $t1, 0($t1)
 662 0538               
 663 0538 34080000		li	$t0, 0
 664 053c               
 665 053c               
 666 053c               print_break_row_loop:
 667 053c               	
 668 053c 11280005		beq	$t1, $t0, print_break_row_done
 669 0540               
 670 0540 3C040000		la	$a0, board_row_break_part
     0544 34840000
 671 0548 0C00017C		jal	print_string
 672 054c               
 673 054c 21080001		addi	$t0, $t0, 1
 674 0550               
 675 0550 0800014F		j	print_break_row_loop
 676 0554               
 677 0554               print_break_row_done:
 678 0554 3C040000		la	$a0, plus_char_break
     0558 34840000
 679 055c 0C00017C		jal	print_string
 680 0560               	
 681 0560 8FBF0000		lw	$ra, 0($sp)
 682 0564 23BD0004		addi	$sp, $sp, 4
 683 0568               	
 684 0568 03E00008		jr	$ra
 685 056c               
 686 056c               
 687 056c               #
 688 056c               # Name: print y hint
 689 056c               #
 690 056c               # Arguments:
 691 056c               #    $a0: pointer to array
 692 056c               #    $a1: index
 693 056c               #
 694 056c               print_y_hint:
 695 056c 23BDFFFC		addi	$sp, $sp, -4
 696 0570 AFBF0000		sw	$ra, 0($sp)
 697 0574               
 698 0574 00852020		add	$a0, $a0, $a1
 699 0578 80840000		lb	$a0, 0($a0)
 700 057c 0C000184		jal	print_number_exclude
 701 0580               
 702 0580 8FBF0000		lw	$ra, 0($sp)
 703 0584 23BD0004		addi	$sp, $sp, 4
 704 0588 03E00008		jr	$ra
 705 058c               
 706 058c               
 707 058c               
 708 058c               #
 709 058c               # Name: prints x axis hints
 710 058c               #
 711 058c               # Arguments: 
 712 058c               #     $a0: pointer to hint array
 713 058c               #
 714 058c               print_x_hints:
 715 058c 23BDFFFC		addi	$sp, $sp, -4
 716 0590 AFBF0000		sw	$ra, 0($sp)
 717 0594               	
 718 0594 00805021		move	$t2, $a0
 719 0598               
 720 0598 3C090000		la      $t1, board_size
     059c 35290000
 721 05a0 81290000		lb      $t1, 0($t1)
 722 05a4               
 723 05a4 34080000		li	$t0, 0
 724 05a8               	
 725 05a8 3C040000		la	$a0, spacess
     05ac 34840000
 726 05b0 0C00017C		jal	print_string
 727 05b4               
 728 05b4               print_x_hints_loop: 
 729 05b4               	
 730 05b4 1128000B		beq	$t1, $t0, print_x_hints_done
 731 05b8               	
 732 05b8 3C040000		la	$a0, spacess
     05bc 34840000
 733 05c0 0C00017C		jal	print_string
 734 05c4               
 735 05c4 81440000		lb	$a0, 0($t2)
 736 05c8               	
 737 05c8 0C000184		jal	print_number_exclude
 738 05cc               
 739 05cc 3C040000		la	$a0, spaces
     05d0 34840000
 740 05d4 0C00017C		jal	print_string
 741 05d8               	
 742 05d8 214A0001		addi	$t2, $t2, 1
 743 05dc 21080001		addi	$t0, $t0, 1
 744 05e0               
 745 05e0 0800016D		j	print_x_hints_loop
 746 05e4               
 747 05e4               print_x_hints_done:
 748 05e4               	
 749 05e4 8FBF0000		lw	$ra, 0($sp)
 750 05e8 23BD0004		addi	$sp, $sp, 4
 751 05ec               	
 752 05ec 03E00008		jr	$ra
 753 05f0               
 754 05f0               
 755 05f0               
 756 05f0               print_string:
 757 05f0 34020004		li	$v0, PRINT_STRING
 758 05f4 0000000C		syscall
 759 05f8               
 760 05f8 03E00008		jr	$ra
 761 05fc               
 762 05fc               print_here:
 763 05fc 34020004		li	$v0, PRINT_STRING
 764 0600 3C040000		la	$a0, here_str
     0604 34840000
 765 0608 0000000C		syscall
 766 060c               
 767 060c 03E00008		jr	$ra
 768 0610               
 769 0610               
 770 0610               
 771 0610               
 772 0610               #
 773 0610               # Name: print_number_exclude
 774 0610               #    prints numbers excluding zero
 775 0610               #
 776 0610               #
 777 0610               print_number_exclude:
 778 0610 23BDFFFC		addi	$sp, $sp, -4
 779 0614 AFBF0000		sw	$ra, 0($sp)
 780 0618               	
 781 0618 10800003		beq	$a0, $zero, print_space
 782 061c               	
 783 061c 34020001		li	$v0, PRINT_INT
 784 0620 0000000C		syscall
 785 0624               	
 786 0624 0800018D		j	done_print_number_exclude
 787 0628               	
 788 0628               print_space:
 789 0628 3C040000		la	$a0, spaces
     062c 34840000
 790 0630 0C00017C		jal	print_string
 791 0634               	
 792 0634               done_print_number_exclude:
 793 0634               
 794 0634 8FBF0000		lw	$ra, 0($sp)
 795 0638 23BD0004		addi	$sp, $sp, 4
 796 063c 03E00008		jr	$ra
 797 0640               
 798 0640               #
 799 0640               # Name: print_number
 800 0640               #    prints numbers
 801 0640               #
 802 0640               #
 803 0640               print_number:
 804 0640 34020001		li	$v0, PRINT_INT
 805 0644 0000000C		syscall
 806 0648               
 807 0648 03E00008		jr	$ra
 808 064c               
 809 064c               
 810 064c               
 811 064c               
 812 064c               
 813 064c               
 814 064c               


EXIT                       = 0000000A   
PRINT_INT                  = 00000001   
PRINT_STRING               = 00000004   
READ_INT                   = 00000005   
board                        00000001 R  data 
board_input_error            000001A6 R  data 
board_row_break_part         00000188 R  data 
board_size                   00000000 R  data 
board_space_back             00000197 R  data 
board_space_front            00000190 R  data 
board_space_mid              00000193 R  data 
done_print_number_exclude    00000634 R  text 
east_hints                   00000141 R  data 
eval                         0000004C R  text 
eval_end                     000000F4 R  text 
eval_loop                    000000B4 R  text 
eval_loop_bottom             000000E4 R  text 
eval_loop_done               000000F0 R  text 
eval_not_found_fixed         000000B0 R  text 
fixed_input_error            0000023B R  data 
fixed_number_input_error     00000202 R  data 
get_east_hint                000001E0 R  text 
get_hint                     000001F8 R  text 
get_north_hint               000001C8 R  text 
get_south_hint               000001D4 R  text 
get_west_hint                000001EC R  text 
here_str                     00000181 R  data 
illegal_input_error          000001D4 R  data 
load_fixed                   000002E0 R  text 
load_fixed_done              0000038C R  text 
load_hints                   000003AC R  text 
load_hints_done              0000040C R  text 
main                         00000000 R  text 
main_done                    0000003C R  text 
new_line_char                0000019B R  data 
no_last_fixed_space          00000098 R  text 
north_hints                  00000101 R  data 
not_last_place               000000CC R  text 
plus_char_break              0000018D R  data 
print_board                  00000428 R  text 
print_board_done             000004D4 R  text 
print_board_loop_col         00000498 R  text 
print_board_loop_col_done    000004BC R  text 
print_board_loop_row         00000464 R  text 
print_break_row              0000050C R  text 
print_break_row_done         00000554 R  text 
print_break_row_loop         0000053C R  text 
print_here                   000005FC R  text 
print_number                 00000640 R  text 
print_number_exclude         00000610 R  text 
print_space                  00000628 R  text 
print_string                 000005F0 R  text 
print_x_hints                0000058C R  text 
print_x_hints_done           000005E4 R  text 
print_x_hints_loop           000005B4 R  text 
print_y_hint                 0000056C R  text 
read_board                   00000170 R  text 
read_fixed_loop              00000308 R  text 
read_input                   00000204 R  text 
read_input_end               000002D0 R  text 
read_input_error             000002C8 R  text 
read_input_loop              000003D0 R  text 
size_fixed_error             0000037C R  text 
size_input_error             000003FC R  text 
south_hints                  00000121 R  data 
spaces                       000001A4 R  data 
spacess                      000001A1 R  data 
spacesss                     0000019D R  data 
validate_board               00000120 R  text 
west_hints                   00000161 R  data 
write_board                  0000019C R  text 
